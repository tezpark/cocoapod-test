// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.1 effective-5.10 (swiftlang-6.1.0.110.21 clang-1700.0.13.3)
// swift-module-flags: -target arm64-apple-ios15.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -module-name SendbirdAIAgentCore -package-name SendbirdInternal
// swift-module-flags-ignorable: -no-verify-emitted-module-interface -interface-compiler-version 6.1
import AVFAudio
import AVFoundation
import AVKit
import Combine
import CoreGraphics
import CoreText
import DeveloperToolsSupport
import Foundation
import MarkdownUI
import MobileCoreServices
import Photos
import PhotosUI
import QuartzCore
import SafariServices
@_spi(SendbirdInternal) import SendbirdChatSDK
import SendbirdUIMessageTemplate
import Splash
import Swift
import SwiftUI
import UIKit
import UIKit
import UIKit
import UniformTypeIdentifiers
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
extension SendbirdAIAgentCore.AIAgentMessenger {
  @_hasMissingDesignatedInitializers public class AgentManager {
    @objc deinit
  }
}
extension SendbirdAIAgentCore.AIAgentMessenger {
  public struct ContextObject : Swift.Codable, Swift.Equatable {
    public let language: Swift.String?
    public let country: Swift.String?
    public let context: [Swift.String : Swift.String]
    public static func == (lhs: SendbirdAIAgentCore.AIAgentMessenger.ContextObject, rhs: SendbirdAIAgentCore.AIAgentMessenger.ContextObject) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension SendbirdAIAgentCore.AIAgentMessenger {
  public typealias ErrorHandler = (Swift.Result<Swift.Void, any Swift.Error>) -> Swift.Void
  public typealias InitParamsBuilder = (_ params: SendbirdChatSDK.InitParams?) -> Swift.Void
  public typealias VoidHandler = () -> Swift.Void
  public typealias ChannelURLResponseHandler = (Swift.Result<Swift.String, any Swift.Error>) -> Swift.Void
  public typealias ContextObjectResultHandler = (Swift.Result<SendbirdAIAgentCore.AIAgentMessenger.ContextObject?, any Swift.Error>) -> Swift.Void
  public typealias AuthenticateResultHandler = (Swift.Result<Swift.String, any Swift.Error>) -> Swift.Void
  public typealias InitializeParamsBuilder = (_ params: SendbirdAIAgentCore.AIAgentMessenger.InitializeParams) -> Swift.Void
}
extension SendbirdAIAgentCore.AIAgentMessenger {
  @_hasMissingDesignatedInitializers public class InitializeParams {
    public var logLevel: SendbirdAIAgentCore.SBALogType
    public var startHandler: SendbirdAIAgentCore.AIAgentMessenger.VoidHandler?
    public var migrationHandler: SendbirdAIAgentCore.AIAgentMessenger.VoidHandler?
    public var apiHost: Swift.String?
    public var wsHost: Swift.String?
    @objc deinit
  }
}
public protocol ViewModelInitParams : AnyObject {
}
extension SendbirdAIAgentCore.AIAgentMessenger {
  public static func registerPush(deviceToken: Foundation.Data, unique: Swift.Bool = false, completionHandler: @escaping (_ success: Swift.Bool) -> Swift.Void)
  public static func unregisterPushToken(completionHandler: @escaping (_ success: Swift.Bool) -> Swift.Void)
  public static func unregisterAllPushToken(completionHandler: @escaping (_ success: Swift.Bool) -> Swift.Void)
}
extension SendbirdAIAgentCore.AIAgentMessenger {
  public static func isRemoteNotificationAvailable() -> Swift.Bool
}
extension SendbirdAIAgentCore.AIAgentMessenger {
  @_hasMissingDesignatedInitializers public class SessionInfo {
    public static func manual(userId: Swift.String, sessionToken: Swift.String, sessionDelegate: (any SendbirdChatSDK.SessionDelegate)?) -> SendbirdAIAgentCore.AIAgentMessenger.SessionInfo
    public static func anonymous() -> SendbirdAIAgentCore.AIAgentMessenger.SessionInfo
    @objc deinit
  }
  @_inheritsConvenienceInitializers public class AnonymousSessionInfo : SendbirdAIAgentCore.AIAgentMessenger.SessionInfo {
    public init()
    @objc deinit
  }
}
extension SendbirdAIAgentCore.AIAgentMessenger {
  @_hasMissingDesignatedInitializers public class ManualSessionInfo : SendbirdAIAgentCore.AIAgentMessenger.SessionInfo {
    final public let userId: Swift.String
    public var sessionToken: Swift.String {
      get
    }
    weak public var sessionDelegate: (any SendbirdChatSDK.SessionDelegate)?
    public init(userId: Swift.String, sessionToken: Swift.String, sessionDelegate: (any SendbirdChatSDK.SessionDelegate)?)
    @objc deinit
  }
}
@_hasMissingDesignatedInitializers public class AIAgentMessenger {
  public static var shortVersion: Swift.String {
    get
  }
  public static var bundleShortVersion: Swift.String {
    get
  }
  public static var versionString: Swift.String {
    get
  }
  public static var currentUserId: Swift.String? {
    get
  }
  public static var config: SendbirdAIAgentCore.SBAConfig {
    get
  }
  public static var currentColorScheme: SendbirdAIAgentCore.SBAColorScheme {
    get
  }
  public static var currentColorSet: SendbirdAIAgentCore.SBAColorSet {
    get
  }
  @_spi(SendbirdInternal) public static func baseInitialize(appId: Swift.String, paramsBuilder: SendbirdAIAgentCore.AIAgentMessenger.InitializeParamsBuilder? = nil, completionHandler: @escaping SendbirdAIAgentCore.AIAgentMessenger.ErrorHandler)
  public static func updateSessionInfo(with sessionInfo: SendbirdAIAgentCore.AIAgentMessenger.SessionInfo)
  public static func authenticate(aiAgentId: Swift.String, paramsBuilder: SendbirdAIAgentCore.AuthenticateParamsBuilder? = nil, completionHandler: @escaping SendbirdAIAgentCore.AIAgentMessenger.AuthenticateResultHandler)
  public static func deauthenticate(completionHandler: SendbirdAIAgentCore.AIAgentMessenger.VoidHandler? = nil)
  public static func attachLauncher(aiAgentId: Swift.String, channelURL: Swift.String? = nil, paramsBuilder: SendbirdAIAgentCore.LauncherSettingsParamsBuilder? = nil)
  public static func detachLauncher(aiAgentId: Swift.String)
  public static func presentConversation(aiAgentId: Swift.String, channelURL: Swift.String? = nil, paramsBuilder: SendbirdAIAgentCore.ConversationSettingsParamsBuilder? = nil)
  public static func presentConversationList(aiAgentId: Swift.String, paramsBuilder: SendbirdAIAgentCore.ConversationSettingsParamsBuilder? = nil)
  public static func update(colorScheme: SendbirdAIAgentCore.SBAColorScheme)
  public static func createConversation(aiAgentId: Swift.String, paramsBuilder: SendbirdAIAgentCore.ConversationCreateParamsBuilder? = nil, completionHandler: @escaping SendbirdAIAgentCore.AIAgentMessenger.ChannelURLResponseHandler)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class AIAgentMessengerMain {
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class ConversationListContext : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
@propertyWrapper public class LayoutSlot<Value> where Value : UIKit.UIView {
  public var wrappedValue: Value? {
    get
    set
  }
  public var projectedValue: SendbirdAIAgentCore.SBALayoutSlot {
    get
  }
  public init(wrappedValue: Value?)
  @objc deinit
}

@_hasMissingDesignatedInitializers public class BaseMessengerParams {
  public var language: Swift.String?
  public var countryCode: Swift.String?
  public var context: [Swift.String : Swift.String]
  @objc deinit
}
public typealias LauncherSettingsParamsBuilder = (_ params: SendbirdAIAgentCore.LauncherSettingsParams) -> Swift.Void
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class LauncherSettingsParams : SendbirdAIAgentCore.BaseMessengerParams {
  public var options: SendbirdAIAgentCore.SBALauncherOptions
  @objc deinit
}
public typealias ConversationSettingsParamsBuilder = (_ params: SendbirdAIAgentCore.ConversationSettingsParams) -> Swift.Void
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class ConversationSettingsParams : SendbirdAIAgentCore.BaseMessengerParams {
  public var parent: UIKit.UIViewController?
  @objc deinit
}
public typealias ConversationCreateParamsBuilder = (_ params: SendbirdAIAgentCore.ConversationCreateParams) -> Swift.Void
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class ConversationCreateParams : SendbirdAIAgentCore.BaseMessengerParams {
  @objc deinit
}
public typealias AuthenticateParamsBuilder = (_ params: SendbirdAIAgentCore.AuthenticateParams) -> Swift.Void
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class AuthenticateParams : SendbirdAIAgentCore.BaseMessengerParams {
  @objc deinit
}
extension UIKit.NSLayoutConstraint {
  @_Concurrency.MainActor @preconcurrency public static func sba_activate(baseView: UIKit.UIView, constraints: [UIKit.NSLayoutConstraint?])
}
extension ObjectiveC.NSObject {
  public static var sba_className: Swift.String {
    get
  }
  public var sba_className: Swift.String {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class SBAAdminMessageCellV2 : SendbirdAIAgentCore.SBABaseMessageCellV2 {
  @_Concurrency.MainActor @preconcurrency override open func layoutContents(with configuration: SendbirdAIAgentCore.SBABaseMessageCellParams) -> UIKit.UIView
  @_Concurrency.MainActor @preconcurrency override public func configure(with configuration: SendbirdAIAgentCore.SBABaseMessageCellParams)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class SBAAttachmentFileCollectionView : SendbirdAIAgentCore.SBAView {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func layoutSubviews()
  @objc deinit
}
extension SendbirdAIAgentCore.SBAAttachmentFileCollectionView : UIKit.UICollectionViewDelegateFlowLayout {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, sizeForItemAt indexPath: Foundation.IndexPath) -> CoreFoundation.CGSize
}
extension SendbirdAIAgentCore.SBAAttachmentFileCollectionView : UIKit.UICollectionViewDataSource, UIKit.UICollectionViewDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
}
public struct SBAAttachmentFileInfo {
}
extension SendbirdAIAgentCore.SBABaseMessageCellV2 : SendbirdUIMessageTemplate.TemplateViewGeneratorDelegate {
  @_Concurrency.MainActor @preconcurrency public func templateView(_ templateView: SendbirdUIMessageTemplate.TemplateSyntax.TemplateView, didLoad image: UIKit.UIImage, from imageURL: Swift.String, named fileName: Swift.String, in subPath: Swift.String)
  @_Concurrency.MainActor @preconcurrency public func templateView(_ templateView: SendbirdUIMessageTemplate.TemplateSyntax.TemplateView, didFinishRootView view: UIKit.UIView, with identifier: Swift.String)
  @_Concurrency.MainActor @preconcurrency public func templateView(_ templateView: SendbirdUIMessageTemplate.TemplateSyntax.TemplateView, didDrawPartialItem item: SendbirdUIMessageTemplate.TemplateSyntax.Item, in view: UIKit.UIView, with identifier: Swift.String)
  @_Concurrency.MainActor @preconcurrency public func templateView(_ templateView: SendbirdUIMessageTemplate.TemplateSyntax.TemplateView, didSelect action: SendbirdUIMessageTemplate.TemplateSyntax.Action)
  @_Concurrency.MainActor @preconcurrency public func templateView(_ templateView: SendbirdUIMessageTemplate.TemplateSyntax.TemplateView, didUpdateContentX value: CoreFoundation.CGFloat, forItem item: SendbirdUIMessageTemplate.TemplateSyntax.Item, in view: UIKit.UIView, with identifier: Swift.String)
}
extension SendbirdAIAgentCore.SBABaseMessageCellV2 : SendbirdUIMessageTemplate.TemplateViewGeneratorDataSource {
  @_Concurrency.MainActor @preconcurrency public func templateView(_ templateView: SendbirdUIMessageTemplate.TemplateSyntax.TemplateView, imageFor urlString: Swift.String, named fileName: Swift.String, in subPath: Swift.String) -> UIKit.UIImage?
  @_Concurrency.MainActor @preconcurrency public func templateView(_ templateView: SendbirdUIMessageTemplate.TemplateSyntax.TemplateView, rootViewFor identifier: Swift.String) -> UIKit.UIView?
  @_Concurrency.MainActor @preconcurrency public func templateView(_ templateView: SendbirdUIMessageTemplate.TemplateSyntax.TemplateView, viewForPartialItem item: SendbirdUIMessageTemplate.TemplateSyntax.Item, with identifier: Swift.String) -> UIKit.UIView?
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency open class SBABaseMessageCellV2 : SendbirdAIAgentCore.SBATableViewCell {
  @objc @SendbirdAIAgentCore.LayoutSlot @_projectedValueProperty($messageTypeView) @_Concurrency.MainActor @preconcurrency public var messageTypeView: UIKit.UIView? {
    @objc get
    @objc set
    _modify
  }
  @_Concurrency.MainActor @preconcurrency public var $messageTypeView: SendbirdAIAgentCore.SBALayoutSlot {
    get
  }
  @objc @SendbirdAIAgentCore.LayoutSlot @_projectedValueProperty($messageAreaView) @_Concurrency.MainActor @preconcurrency public var messageAreaView: UIKit.UIView? {
    @objc get
    @objc set
    _modify
  }
  @_Concurrency.MainActor @preconcurrency public var $messageAreaView: SendbirdAIAgentCore.SBALayoutSlot {
    get
  }
  @objc @SendbirdAIAgentCore.LayoutSlot @_projectedValueProperty($poweredByMessageView) @_Concurrency.MainActor @preconcurrency public var poweredByMessageView: SendbirdAIAgentCore.SBAPoweredByMessageView? {
    @objc get
    @objc set
    _modify
  }
  @_Concurrency.MainActor @preconcurrency public var $poweredByMessageView: SendbirdAIAgentCore.SBALayoutSlot {
    get
  }
  @objc @SendbirdAIAgentCore.LayoutSlot @_projectedValueProperty($userNameView) @_Concurrency.MainActor @preconcurrency public var userNameView: SendbirdAIAgentCore.SBAUserNameView? {
    @objc get
    @objc set
    _modify
  }
  @_Concurrency.MainActor @preconcurrency public var $userNameView: SendbirdAIAgentCore.SBALayoutSlot {
    get
  }
  @objc @SendbirdAIAgentCore.LayoutSlot @_projectedValueProperty($profileView) @_Concurrency.MainActor @preconcurrency public var profileView: SendbirdAIAgentCore.SBAMessageProfileView? {
    @objc get
    @objc set
    _modify
  }
  @_Concurrency.MainActor @preconcurrency public var $profileView: SendbirdAIAgentCore.SBALayoutSlot {
    get
  }
  @objc @SendbirdAIAgentCore.LayoutSlot @_projectedValueProperty($stateView) @_Concurrency.MainActor @preconcurrency public var stateView: SendbirdAIAgentCore.SBAMessageStateView? {
    @objc get
    @objc set
    _modify
  }
  @_Concurrency.MainActor @preconcurrency public var $stateView: SendbirdAIAgentCore.SBALayoutSlot {
    get
  }
  @objc @SendbirdAIAgentCore.LayoutSlot @_projectedValueProperty($templateView) @_Concurrency.MainActor @preconcurrency public var templateView: UIKit.UIView? {
    @objc get
    @objc set
    _modify
  }
  @_Concurrency.MainActor @preconcurrency public var $templateView: SendbirdAIAgentCore.SBALayoutSlot {
    get
  }
  @objc @_Concurrency.MainActor @preconcurrency public var messageTopSpacing: CoreFoundation.CGFloat
  @objc @_Concurrency.MainActor @preconcurrency public var messageBottomSpacing: CoreFoundation.CGFloat
  @objc @_Concurrency.MainActor @preconcurrency public var bubbleLayoutSlot: SendbirdAIAgentCore.SBABubbleLayoutSlot
  @_Concurrency.MainActor @preconcurrency @objc dynamic open func setupViews()
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func setupStyles()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func prepareForReuse()
  @_Concurrency.MainActor @preconcurrency open func layoutContents(with configuration: SendbirdAIAgentCore.SBABaseMessageCellParams) -> UIKit.UIView
  @_Concurrency.MainActor @preconcurrency open func layoutMessageContentsLeft(with configuration: SendbirdAIAgentCore.SBABaseMessageCellParams) -> UIKit.UIView
  @_Concurrency.MainActor @preconcurrency open func layoutMessageContentsRight(with configuration: SendbirdAIAgentCore.SBABaseMessageCellParams) -> UIKit.UIView
  @_Concurrency.MainActor @preconcurrency open func layoutMessageContentsCenter(with configuration: SendbirdAIAgentCore.SBABaseMessageCellParams) -> UIKit.UIView
  @objc @_Concurrency.MainActor @preconcurrency open func configureLayouts()
  @_Concurrency.MainActor @preconcurrency open func configure(with configuration: SendbirdAIAgentCore.SBABaseMessageCellParams)
  @_Concurrency.MainActor @preconcurrency open func updateBubbleStyle(with configuration: SendbirdAIAgentCore.SBABaseMessageCellParams)
  @_Concurrency.MainActor @preconcurrency open func updateUserNameView(with configuration: SendbirdAIAgentCore.SBABaseMessageCellParams)
  @_Concurrency.MainActor @preconcurrency open func updateGroupingViews(with configuration: SendbirdAIAgentCore.SBABaseMessageCellParams)
  @objc @_Concurrency.MainActor @preconcurrency open func didScrollCarouselView(contentX value: CoreFoundation.CGFloat)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor @preconcurrency open class SBABaseViewController : UIKit.UIViewController, UIKit.UINavigationControllerDelegate {
  @_Concurrency.MainActor @preconcurrency open var bodyViewSafeAreaAnchor: SendbirdAIAgentCore.SafeAreaAnchor {
    get
  }
  @objc @_Concurrency.MainActor @preconcurrency public func setupBodyView()
  @objc @_Concurrency.MainActor @preconcurrency public func setupBodyLayouts()
  @objc @_Concurrency.MainActor @preconcurrency public func setupBodyContents(_ contents: UIKit.UIView)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func loadView()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewDidLayoutSubviews()
  @objc @_Concurrency.MainActor @preconcurrency open func setupViews()
  @objc @_Concurrency.MainActor @preconcurrency open func setupLayouts()
  @objc @_Concurrency.MainActor @preconcurrency open func updateLayouts()
  @objc @_Concurrency.MainActor @preconcurrency open func setupStyles()
  @objc @_Concurrency.MainActor @preconcurrency open func updateStyles()
  @_Concurrency.MainActor @preconcurrency @objc open func navigationController(_ navigationController: UIKit.UINavigationController, didShow viewController: UIKit.UIViewController, animated: Swift.Bool)
  @objc @_Concurrency.MainActor @preconcurrency open func showLoading(_ isLoading: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class SBABubbleLayoutSlot : SendbirdAIAgentCore.SBALayoutSlot {
  @_Concurrency.MainActor @preconcurrency @objc dynamic open func setupLayouts()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init()
  @objc deinit
}
public struct SBAColorPalette {
}
public enum SBAColorScheme {
  case light
  case dark
  public static func == (a: SendbirdAIAgentCore.SBAColorScheme, b: SendbirdAIAgentCore.SBAColorScheme) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class SBAColorSet {
  public var primary: SendbirdAIAgentCore.SBAColorSet.Primary
  public var secondary: SendbirdAIAgentCore.SBAColorSet.Secondary
  @_hasMissingDesignatedInitializers public class Primary {
    public var extraDark: UIKit.UIColor
    public var dark: UIKit.UIColor
    public var main: UIKit.UIColor
    public var light: UIKit.UIColor
    public var extraLight: UIKit.UIColor
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class Secondary {
    public var extraDark: UIKit.UIColor
    public var dark: UIKit.UIColor
    public var main: UIKit.UIColor
    public var light: UIKit.UIColor
    public var extraLight: UIKit.UIColor
    @objc deinit
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class SBACommonModule : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class SBAConfig {
  public var conversation: SendbirdAIAgentCore.SBAConfig.Conversation
  public var conversationList: SendbirdAIAgentCore.SBAConfig.ConversationList
  @objc deinit
}
extension SendbirdAIAgentCore.SBAConfig {
  @_hasMissingDesignatedInitializers public class ConversationList {
    @objc deinit
  }
}
extension SendbirdAIAgentCore.SBAConfig {
  @_hasMissingDesignatedInitializers public class Conversation {
    public var messageCellMaxWidth: CoreFoundation.CGFloat
    public var isBottomUpLayout: Swift.Bool
    public var isMessageReceiptStateEnabled: Swift.Bool
    public var carousel: SendbirdAIAgentCore.SBAConfig.Conversation.Carousel
    public var input: SendbirdAIAgentCore.SBAConfig.Conversation.Input
    public var template: SendbirdAIAgentCore.SBAConfig.Conversation.Template
    public var isConversationClosedViewEnabled: Swift.Bool
    @objc deinit
  }
}
extension SendbirdAIAgentCore.SBAConfig.Conversation {
  @_hasMissingDesignatedInitializers public class Carousel {
    public var leftPadding: Swift.Int?
    public var spacing: Swift.Int?
    @objc deinit
  }
}
extension SendbirdAIAgentCore.SBAConfig.Conversation {
  @_hasMissingDesignatedInitializers public class Input {
    public var fileAttachment: SendbirdAIAgentCore.SBAConfig.Conversation.Input.FileAttachment
    @objc deinit
  }
}
extension SendbirdAIAgentCore.SBAConfig.Conversation.Input {
  @_hasMissingDesignatedInitializers public class FileAttachment {
    public var leadingPadding: CoreFoundation.CGFloat
    public var trailingPadding: CoreFoundation.CGFloat
    @objc deinit
  }
}
extension SendbirdAIAgentCore.SBAConfig.Conversation {
  @_hasMissingDesignatedInitializers public class Template {
    public var internalVariables: SendbirdAIAgentCore.SBAConfig.Conversation.Template.InternalVariables
    @objc deinit
  }
}
extension SendbirdAIAgentCore.SBAConfig.Conversation.Template {
  @_hasMissingDesignatedInitializers public class InternalVariables {
    public var carousel: SendbirdAIAgentCore.SBAConfig.Conversation.Template.InternalVariables.Carousel
    public var cascade: SendbirdAIAgentCore.SBAConfig.Conversation.Template.InternalVariables.Cascade
    public func make() -> [Swift.String : Swift.String]
    @objc deinit
  }
}
extension SendbirdAIAgentCore.SBAConfig.Conversation.Template.InternalVariables {
  @_hasMissingDesignatedInitializers public class Carousel {
    public var spacing: Swift.Int
    public var maxChildWidth: Swift.Int
    public var paddingRight: Swift.Int
    public var paddingLeft: Swift.Int
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class Cascade {
    public var spacing: Swift.Int
    public var paddingRight: Swift.Int
    public var paddingLeft: Swift.Int
    @objc deinit
  }
}
open class SBABaseConversationCellParams {
  final public let channel: SendbirdChatSDK.GroupChannel
  final public let isLastMessage: Swift.Bool
  public init(channel: SendbirdChatSDK.GroupChannel, isLastMessage: Swift.Bool)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency open class SBABaseConversationCell : SendbirdAIAgentCore.SBATableViewCell {
  @_Concurrency.MainActor @preconcurrency public var configuration: SendbirdAIAgentCore.SBABaseConversationCellParams?
  @objc @_Concurrency.MainActor @preconcurrency public var contentSelectHandler: ((SendbirdChatSDK.GroupChannel) -> Swift.Void)?
  @_Concurrency.MainActor @preconcurrency open func configure(with configuration: SendbirdAIAgentCore.SBABaseConversationCellParams)
  @objc deinit
  @objc @_Concurrency.MainActor @preconcurrency open func configureLayouts()
  @_Concurrency.MainActor @preconcurrency @objc dynamic open func setupViews()
  @_Concurrency.MainActor @preconcurrency @objc dynamic open func setupActions()
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency open class SBAConversationCell : SendbirdAIAgentCore.SBABaseConversationCell {
  @objc @_Concurrency.MainActor @preconcurrency public var channel: SendbirdChatSDK.GroupChannel? {
    @objc get
  }
  @objc @_Concurrency.MainActor @preconcurrency public var conversation: SendbirdChatSDK.Conversation? {
    @objc get
  }
  @objc @SendbirdAIAgentCore.LayoutSlot @_projectedValueProperty($dateLabel) @_Concurrency.MainActor @preconcurrency public var dateLabel: UIKit.UILabel? {
    @objc get
    @objc set
    _modify
  }
  @_Concurrency.MainActor @preconcurrency public var $dateLabel: SendbirdAIAgentCore.SBALayoutSlot {
    get
  }
  @objc @SendbirdAIAgentCore.LayoutSlot @_projectedValueProperty($timeLabel) @_Concurrency.MainActor @preconcurrency public var timeLabel: UIKit.UILabel? {
    @objc get
    @objc set
    _modify
  }
  @_Concurrency.MainActor @preconcurrency public var $timeLabel: SendbirdAIAgentCore.SBALayoutSlot {
    get
  }
  @objc @SendbirdAIAgentCore.LayoutSlot @_projectedValueProperty($topicLabel) @_Concurrency.MainActor @preconcurrency public var topicLabel: UIKit.UILabel? {
    @objc get
    @objc set
    _modify
  }
  @_Concurrency.MainActor @preconcurrency public var $topicLabel: SendbirdAIAgentCore.SBALayoutSlot {
    get
  }
  @objc @SendbirdAIAgentCore.LayoutSlot @_projectedValueProperty($iconView) @_Concurrency.MainActor @preconcurrency public var iconView: UIKit.UIImageView? {
    @objc get
    @objc set
    _modify
  }
  @_Concurrency.MainActor @preconcurrency public var $iconView: SendbirdAIAgentCore.SBALayoutSlot {
    get
  }
  @objc @SendbirdAIAgentCore.LayoutSlot @_projectedValueProperty($divideView) @_Concurrency.MainActor @preconcurrency public var divideView: UIKit.UIView? {
    @objc get
    @objc set
    _modify
  }
  @_Concurrency.MainActor @preconcurrency public var $divideView: SendbirdAIAgentCore.SBALayoutSlot {
    get
  }
  @objc deinit
  @_Concurrency.MainActor @preconcurrency @objc dynamic open func setupLayouts()
  @_Concurrency.MainActor @preconcurrency @objc dynamic open func setupStyles()
  @_Concurrency.MainActor @preconcurrency @objc override public func configureLayouts()
  @_Concurrency.MainActor @preconcurrency open func layoutBody(with configuration: SendbirdAIAgentCore.SBABaseConversationCellParams) -> UIKit.UIView
  @_Concurrency.MainActor @preconcurrency open func layoutLeftItems(with configuration: SendbirdAIAgentCore.SBABaseConversationCellParams) -> UIKit.UIView?
  @_Concurrency.MainActor @preconcurrency open func layoutContents(with configuration: SendbirdAIAgentCore.SBABaseConversationCellParams) -> UIKit.UIView
  @_Concurrency.MainActor @preconcurrency open func layoutRightItems(with configuration: SendbirdAIAgentCore.SBABaseConversationCellParams) -> UIKit.UIView?
  @_Concurrency.MainActor @preconcurrency override open func configure(with configuration: SendbirdAIAgentCore.SBABaseConversationCellParams)
  @_Concurrency.MainActor @preconcurrency open func updateDatas(with configuration: SendbirdAIAgentCore.SBABaseConversationCellParams)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func prepareForReuse()
  @objc @_Concurrency.MainActor @preconcurrency public var defaultTopicText: Swift.String {
    @objc get
  }
  @objc @_Concurrency.MainActor @preconcurrency public var defaultDateText: Swift.String? {
    @objc get
  }
  @objc @_Concurrency.MainActor @preconcurrency public var defaultTimeText: Swift.String? {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency public var defaultTimestamp: Swift.Int64? {
    get
  }
  @objc @_Concurrency.MainActor @preconcurrency public var defaultDateTitleFont: UIKit.UIFont {
    @objc get
  }
  @objc @_Concurrency.MainActor @preconcurrency public var defaultDateTitleColor: UIKit.UIColor {
    @objc get
  }
  @objc @_Concurrency.MainActor @preconcurrency public var defaultTimeTitleFont: UIKit.UIFont {
    @objc get
  }
  @objc @_Concurrency.MainActor @preconcurrency public var defaultTimeTitleColor: UIKit.UIColor {
    @objc get
  }
  @objc @_Concurrency.MainActor @preconcurrency public var defaultTopicTitleFont: UIKit.UIFont {
    @objc get
  }
  @objc @_Concurrency.MainActor @preconcurrency public var defaultTopicTitleColor: UIKit.UIColor {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency open class SBAConversationTitleView : SendbirdAIAgentCore.SBAView {
  @_Concurrency.MainActor @preconcurrency public var coverImage: SendbirdAIAgentCore.SBACoverImageView {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var stackView: UIKit.UIStackView {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var titleLabel: UIKit.UILabel {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var kCoverImageSize: CoreFoundation.CGFloat
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init()
  @_Concurrency.MainActor @preconcurrency @objc dynamic open func setupViews()
  @_Concurrency.MainActor @preconcurrency @objc dynamic open func setupLayouts()
  @_Concurrency.MainActor @preconcurrency @objc dynamic open func setupStyles()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency open func loadTitle()
  @_Concurrency.MainActor @preconcurrency open func loadCoverImage()
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency open class SBAConversationListBottomView : SendbirdAIAgentCore.SBAView {
  @SendbirdAIAgentCore.LayoutSlot @_projectedValueProperty($button) @_Concurrency.MainActor @preconcurrency public var button: UIKit.UIButton? {
    get
    set
    _modify
  }
  @_Concurrency.MainActor @preconcurrency public var $button: SendbirdAIAgentCore.SBALayoutSlot {
    get
  }
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init()
  @objc deinit
  @_Concurrency.MainActor @preconcurrency @objc dynamic open func setupViews()
  @_Concurrency.MainActor @preconcurrency @objc dynamic open func setupLayouts()
  @_Concurrency.MainActor @preconcurrency @objc dynamic open func setupStyles()
  @_Concurrency.MainActor @preconcurrency @objc dynamic open func setupActions()
  @_Concurrency.MainActor @preconcurrency open func layoutBody() -> UIKit.UIView
}
extension SendbirdAIAgentCore.SBAConversationListModule.Header {
  public enum DelegateEvent {
    case custom(name: Swift.String, data: Any?)
  }
  @_Concurrency.MainActor @preconcurrency public func delegate(with event: SendbirdAIAgentCore.SBAConversationListModule.Header.DelegateEvent)
}
extension SendbirdAIAgentCore.SBAConversationListModule {
  @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(SBAConversationListModuleHeader) @objcMembers @_Concurrency.MainActor @preconcurrency open class Header : SendbirdAIAgentCore.BaseView {
    @objc @_Concurrency.MainActor @preconcurrency public var leftItemsMargin: CoreFoundation.CGFloat
    @objc @_Concurrency.MainActor @preconcurrency public var rightItemsMargin: CoreFoundation.CGFloat
    @objc @_Concurrency.MainActor @preconcurrency public var titleViewPadding: CoreFoundation.CGFloat
    @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
    @objc deinit
    @_Concurrency.MainActor @preconcurrency @objc dynamic open func setupViews()
    @_Concurrency.MainActor @preconcurrency @objc dynamic open func setupLayouts()
    @_Concurrency.MainActor @preconcurrency @objc dynamic open func setupStyles()
    @_Concurrency.MainActor @preconcurrency @objc dynamic open func setupActions()
    @objc @_Concurrency.MainActor @preconcurrency open func layoutBody() -> UIKit.UIView
    @objc @_Concurrency.MainActor @preconcurrency open func layoutLeftItems() -> UIKit.UIView?
    @objc @_Concurrency.MainActor @preconcurrency open func layoutRightItems() -> UIKit.UIView?
  }
}
public protocol SBAConversationListModuleListDelegate : AnyObject {
  func conversationListModule(_ listComponent: SendbirdAIAgentCore.SBAConversationListModule.List, didReceiveEvent event: SendbirdAIAgentCore.SBAConversationListModule.List.DelegateEvent)
}
public protocol SBAConversationListModuleListDataSource : AnyObject {
  func conversationListModule(_ listComponent: SendbirdAIAgentCore.SBAConversationListModule.List, requestsDataFor event: SendbirdAIAgentCore.SBAConversationListModule.List.DataSourceEvent) -> Any?
}
extension SendbirdAIAgentCore.SBAConversationListModule.List {
  public typealias Delegate = SendbirdAIAgentCore.SBAConversationListModuleListDelegate
  public typealias DataSource = SendbirdAIAgentCore.SBAConversationListModuleListDataSource
  public enum DelegateEvent {
    case didSelectItem(SendbirdChatSDK.GroupChannel)
    case pushOngoingConversation
    case retryLoadList
    case didReceiveError(SendbirdChatSDK.SBError)
    case loadMore
    case custom(name: Swift.String, data: Any?)
  }
  public enum DataSourceEvent {
    case conversationList
    case conversationForIndex(Swift.Int)
    case custom
  }
  public enum HandleEvent {
    case reloadTableView(needsToLayout: Swift.Bool)
    case setupBottomView
  }
}
extension SendbirdAIAgentCore.SBAConversationListModule {
  @_hasMissingDesignatedInitializers @objc(SBAConversationListModuleList) @objcMembers @_Concurrency.MainActor @preconcurrency open class List : SendbirdAIAgentCore.SBAView {
    @objc @SendbirdAIAgentCore.LayoutSlot @_projectedValueProperty($tableView) @_Concurrency.MainActor @preconcurrency public var tableView: UIKit.UITableView? {
      @objc get
      @objc set
      _modify
    }
    @_Concurrency.MainActor @preconcurrency public var $tableView: SendbirdAIAgentCore.SBALayoutSlot {
      get
    }
    @objc @SendbirdAIAgentCore.LayoutSlot @_projectedValueProperty($bottomView) @_Concurrency.MainActor @preconcurrency public var bottomView: SendbirdAIAgentCore.SBAConversationListBottomView? {
      @objc get
      @objc set
      _modify
    }
    @_Concurrency.MainActor @preconcurrency public var $bottomView: SendbirdAIAgentCore.SBALayoutSlot {
      get
    }
    @objc @_Concurrency.MainActor @preconcurrency public var emptyView: SendbirdAIAgentCore.SBAEmptyView?
    @objc @_Concurrency.MainActor @preconcurrency public var fullList: [SendbirdChatSDK.GroupChannel]? {
      @objc get
    }
    @objc @_Concurrency.MainActor @preconcurrency public var numberOfList: Swift.Int {
      @objc get
    }
    @_Concurrency.MainActor @preconcurrency @objc required dynamic public init()
    @objc deinit
    @_Concurrency.MainActor @preconcurrency @objc dynamic open func setupViews()
    @objc @_Concurrency.MainActor @preconcurrency public func setupEmptyView()
    @objc @_Concurrency.MainActor @preconcurrency public func setupTableView()
    @objc @_Concurrency.MainActor @preconcurrency public func setupBottomView()
    @_Concurrency.MainActor @preconcurrency @objc dynamic open func setupLayouts()
    @_Concurrency.MainActor @preconcurrency @objc dynamic open func setupStyles()
    @_Concurrency.MainActor @preconcurrency @objc dynamic open func setupActions()
    @_Concurrency.MainActor @preconcurrency open func configure(delegate: any SendbirdAIAgentCore.SBAConversationListModuleListDelegate, dataSource: any SendbirdAIAgentCore.SBAConversationListModuleListDataSource)
    @objc @_Concurrency.MainActor @preconcurrency open func layoutBody() -> UIKit.UIView
    @objc @_Concurrency.MainActor @preconcurrency public func register(customDataCellType: SendbirdAIAgentCore.SBABaseConversationCell.Type)
    @objc @_Concurrency.MainActor @preconcurrency open func generateCellIdentifier(by channel: SendbirdChatSDK.GroupChannel) -> Swift.String?
    @_Concurrency.MainActor @preconcurrency @objc public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
    @_Concurrency.MainActor @preconcurrency @objc public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  }
}
extension SendbirdAIAgentCore.SBAConversationListModule.List : UIKit.UITableViewDelegate, UIKit.UITableViewDataSource {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func tableView(_ tableView: UIKit.UITableView, willDisplay cell: UIKit.UITableViewCell, forRowAt indexPath: Foundation.IndexPath)
}
@objc @_inheritsConvenienceInitializers public class SBAConversationListModule : ObjectiveC.NSObject {
  public static var HeaderComponent: SendbirdAIAgentCore.SBAConversationListModule.Header.Type
  public static var ListComponent: SendbirdAIAgentCore.SBAConversationListModule.List.Type
  @objc override dynamic public init()
  @objc deinit
}
extension SendbirdAIAgentCore.SBAConversationListModule.List {
  @objc @_Concurrency.MainActor @preconcurrency public static var BottomView: SendbirdAIAgentCore.SBAConversationListBottomView.Type
  @objc @_Concurrency.MainActor @preconcurrency public static var ConversationCell: SendbirdAIAgentCore.SBABaseConversationCell.Type
}
@objc @_Concurrency.MainActor @preconcurrency open class SBAConversationListViewController : SendbirdAIAgentCore.SBABaseViewController, SendbirdAIAgentCore.SBAConversationListModuleListDelegate, SendbirdAIAgentCore.SBAConversationListModuleListDataSource, SendbirdAIAgentCore.SBAConversationListViewModelDelegate, SendbirdAIAgentCore.SBAConversationListViewModelDataSource {
  @objc @_Concurrency.MainActor @preconcurrency required public init(aiAgentId: Swift.String)
  @available(*, unavailable)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency override open var bodyViewSafeAreaAnchor: SendbirdAIAgentCore.SafeAreaAnchor {
    get
  }
  @_Concurrency.MainActor @preconcurrency @objc override open func setupViews()
  @_Concurrency.MainActor @preconcurrency @objc override open func setupStyles()
  @objc @_Concurrency.MainActor @preconcurrency open func layoutBody() -> UIKit.UIView
  @_Concurrency.MainActor @preconcurrency open func conversationListModule(_ headerComponent: SendbirdAIAgentCore.SBAConversationListModule.Header, didReceiveEvent event: SendbirdAIAgentCore.SBAConversationListModule.Header.DelegateEvent)
  @_Concurrency.MainActor @preconcurrency open func conversationListModule(_ listComponent: SendbirdAIAgentCore.SBAConversationListModule.List, didReceiveEvent event: SendbirdAIAgentCore.SBAConversationListModule.List.DelegateEvent)
  @_Concurrency.MainActor @preconcurrency open func conversationListModule(_ listComponent: SendbirdAIAgentCore.SBAConversationListModule.List, requestsDataFor event: SendbirdAIAgentCore.SBAConversationListModule.List.DataSourceEvent) -> Any?
  @_Concurrency.MainActor @preconcurrency open func conversationListViewModel(_ viewModel: SendbirdAIAgentCore.SBAConversationListViewModel, didReceiveEvent event: SendbirdAIAgentCore.SBAConversationListViewModel.DelegateEvent)
  @_Concurrency.MainActor @preconcurrency open func conversationListViewModel(_ viewModel: SendbirdAIAgentCore.SBAConversationListViewModel, requestsDataFor event: SendbirdAIAgentCore.SBAConversationListViewModel.DataSourceEvent) -> Any?
}
public protocol SBAConversationListViewModelDelegate : AnyObject {
  func conversationListViewModel(_ viewModel: SendbirdAIAgentCore.SBAConversationListViewModel, didReceiveEvent: SendbirdAIAgentCore.SBAConversationListViewModel.DelegateEvent)
}
public protocol SBAConversationListViewModelDataSource : AnyObject {
  func conversationListViewModel(_ viewModel: SendbirdAIAgentCore.SBAConversationListViewModel, requestsDataFor: SendbirdAIAgentCore.SBAConversationListViewModel.DataSourceEvent) -> Any?
}
@objc open class SBAConversationListViewModel : ObjectiveC.NSObject {
  public var channelList: [SendbirdChatSDK.GroupChannel]? {
    get
  }
  public var hasNext: Swift.Bool {
    get
  }
  required public init(aiAgentId: Swift.String, paramsBuilder: SendbirdAIAgentCore.SBAConversationListViewModel.InitParamsBuilder? = nil)
  @objc deinit
  open func configure(delegate: (any SendbirdAIAgentCore.SBAConversationListViewModelDelegate)?, dataSource: (any SendbirdAIAgentCore.SBAConversationListViewModelDataSource)?)
  public func loadInitalialChannelList()
  public func loadNextChannelList(reset: Swift.Bool)
  public func reset()
}
extension SendbirdAIAgentCore.SBAConversationListViewModel {
  public typealias Delegate = SendbirdAIAgentCore.SBAConversationListViewModelDelegate
  public typealias DataSource = SendbirdAIAgentCore.SBAConversationListViewModelDataSource
  public typealias InitParamsBuilder = (_ params: SendbirdAIAgentCore.SBAConversationListViewModel.InitParams) -> Swift.Void
  @_hasMissingDesignatedInitializers public class InitParams : SendbirdAIAgentCore.ViewModelInitParams {
    @objc deinit
  }
  public enum DelegateEvent {
    case didInitialiLoadChannelList(SendbirdAIAgentCore.ConversationListContext, [SendbirdChatSDK.GroupChannel])
    case didAddChannelList(SendbirdAIAgentCore.ConversationListContext, [SendbirdChatSDK.GroupChannel])
    case didUpdateChannelList(SendbirdAIAgentCore.ConversationListContext, [SendbirdChatSDK.GroupChannel])
    case didDeleteChannelList(SendbirdAIAgentCore.ConversationListContext, [Swift.String])
    case didReceiveError(any Swift.Error)
    case shouldUpdateLoadingState(_: Swift.Bool)
    case custom(name: Swift.String, data: Any?)
  }
  public enum DataSourceEvent {
    case custom(name: Swift.String, data: Any?)
  }
}
extension SendbirdAIAgentCore.SBAConversationListViewModel {
  public func delegate(with event: SendbirdAIAgentCore.SBAConversationListViewModel.DelegateEvent)
  public func dataSource<T>(with event: SendbirdAIAgentCore.SBAConversationListViewModel.DataSourceEvent) -> T?
}
public protocol SBAConversationModuleHeaderDelegate : AnyObject {
  func conversationModule(_ headerComponent: SendbirdAIAgentCore.SBAConversationModule.Header, didReceiveEvent event: SendbirdAIAgentCore.SBAConversationModule.Header.DelegateEvent)
}
extension SendbirdAIAgentCore.SBAConversationModule.Header {
  public enum DataSourceEvent {
    case channel
    public static func == (a: SendbirdAIAgentCore.SBAConversationModule.Header.DataSourceEvent, b: SendbirdAIAgentCore.SBAConversationModule.Header.DataSourceEvent) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum DelegateEvent {
    case didTapCloseItem(item: UIKit.UIBarButtonItem)
    case didTapMenuItem(item: UIKit.UIBarButtonItem)
    case didTapHandoffItem(item: UIKit.UIBarButtonItem)
    case custom(name: Swift.String, data: Any?)
  }
  @_Concurrency.MainActor @preconcurrency public func delegate(with event: SendbirdAIAgentCore.SBAConversationModule.Header.DelegateEvent)
  @_Concurrency.MainActor @preconcurrency public func dataSource<T>(with event: SendbirdAIAgentCore.SBAConversationModule.Header.DataSourceEvent) -> T?
}
extension SendbirdAIAgentCore.SBAConversationModule {
  @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(SBAConversationModuleHeader) @objcMembers @_Concurrency.MainActor @preconcurrency open class Header : SendbirdAIAgentCore.BaseView {
    @objc @SendbirdAIAgentCore.LayoutSlot @_projectedValueProperty($titleView) @_Concurrency.MainActor @preconcurrency public var titleView: SendbirdAIAgentCore.SBAConversationTitleView? {
      @objc get
      @objc set
      _modify
    }
    @_Concurrency.MainActor @preconcurrency public var $titleView: SendbirdAIAgentCore.SBALayoutSlot {
      get
    }
    @objc @_Concurrency.MainActor @preconcurrency public var leftItemsMargin: CoreFoundation.CGFloat
    @objc @_Concurrency.MainActor @preconcurrency public var rightItemsMargin: CoreFoundation.CGFloat
    @objc @_Concurrency.MainActor @preconcurrency public var titleViewPadding: CoreFoundation.CGFloat
    @_Concurrency.MainActor @preconcurrency weak public var delegate: (any SendbirdAIAgentCore.SBAConversationModuleHeaderDelegate)?
    @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
    @objc deinit
    @_Concurrency.MainActor @preconcurrency @objc dynamic open func setupViews()
    @_Concurrency.MainActor @preconcurrency @objc dynamic open func setupLayouts()
    @_Concurrency.MainActor @preconcurrency @objc dynamic open func setupStyles()
    @_Concurrency.MainActor @preconcurrency @objc dynamic open func setupActions()
  }
}
extension SendbirdAIAgentCore.SBAConversationModule.Header {
  @objc @_Concurrency.MainActor @preconcurrency dynamic open func layoutBody() -> UIKit.UIView
  @objc @_Concurrency.MainActor @preconcurrency dynamic open func layoutLeftItems() -> UIKit.UIView?
  @objc @_Concurrency.MainActor @preconcurrency dynamic open func layoutRightItems() -> UIKit.UIView?
}
extension SendbirdAIAgentCore.SBAConversationModule.Input {
  public enum DataSourceEvent {
    case channelForInputView
    case needsShowSpecialNotice
    case isMessageStreaming
    case isMessageTyping
    public static func == (a: SendbirdAIAgentCore.SBAConversationModule.Input.DataSourceEvent, b: SendbirdAIAgentCore.SBAConversationModule.Input.DataSourceEvent) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum DelegateEvent {
    case didReceiveError(error: any Swift.Error, isBlocker: Swift.Bool)
    case didTapAdd
    case didTapResource(type: SendbirdAIAgentCore.MediaResourceType)
    case didTapEdit(text: Swift.String)
    case didChangeText(text: Swift.String)
    case willChangeMode(mode: SendbirdAIAgentCore.SBAMessageInputMode, message: SendbirdChatSDK.BaseMessage?)
    case didChangeMode(mode: SendbirdAIAgentCore.SBAMessageInputMode, message: SendbirdChatSDK.BaseMessage?)
    case didPickFileData(fileData: Foundation.Data?, fileName: Swift.String, mimeType: Swift.String, parentMessage: SendbirdChatSDK.BaseMessage?)
    case didTapSend(text: Swift.String?, parentMessage: SendbirdChatSDK.BaseMessage?, attachmentFile: SendbirdAIAgentCore.SBAAttachmentFileInfo?)
    case shouldDeleteAttachmentFile
  }
}
extension SendbirdAIAgentCore.SBAConversationModule {
  @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(SBAConversationModuleInput) @objcMembers @_Concurrency.MainActor @preconcurrency open class Input : SendbirdAIAgentCore.BaseView {
    @available(*, unavailable, renamed: "SBABaseConversationModule.Input()")
    @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
    @objc deinit
    @objc @_Concurrency.MainActor @preconcurrency override open func setupBodyLayouts()
    @objc @_Concurrency.MainActor @preconcurrency open func layoutBody() -> UIKit.UIView
  }
}
extension SendbirdAIAgentCore.SBAConversationModule.List {
  public enum DataSourceEvent {
    case isMessageStreamingState(messageId: Swift.Int64)
    case isLatestMessageStreaming
    case didHandleUncachedTemplateKeys(templateKeys: [Swift.String])
    case channelForTableView(tableView: UIKit.UITableView)
    case sentMessagesInTableView(tableView: UIKit.UITableView)
    case fullMessagesInTableView(tableView: UIKit.UITableView)
    case hasNextInTableView(tableView: UIKit.UITableView)
    case lastSeenIndexPathIn(tableView: UIKit.UITableView)
    case startingPointIn(tableView: UIKit.UITableView)
    case pendingMessageManagerForCell(cell: UIKit.UITableViewCell)
  }
  public enum DelegateEvent {
    case didSelectSuggestedReplyOption(value: Swift.String?)
    case didSubmitMessageForm(form: SendbirdChatSDK.MessageForm, cell: SendbirdAIAgentCore.BaseMessageCellType)
    case didUpdateFeedbackAnswer(answer: SendbirdAIAgentCore.SBAFeedbackAnswer, cell: SendbirdAIAgentCore.BaseMessageCellType)
    case shouldHandleTemplatePreDefinedAction(action: SendbirdAIAgentCore.SBAMessageTemplate.Action, message: SendbirdChatSDK.BaseMessage, indexPath: Foundation.IndexPath)
    case shouldHandleTemplateCustomAction(action: SendbirdAIAgentCore.SBAMessageTemplate.Action, message: SendbirdChatSDK.BaseMessage, indexPath: Foundation.IndexPath)
    case shouldHandleTemplateAction(action: SendbirdAIAgentCore.SBAMessageTemplate.Action, message: SendbirdChatSDK.BaseMessage, indexPath: Foundation.IndexPath)
    case shouldHandleTemplateInternalAction(action: SendbirdAIAgentCore.SBAMessageTemplate.Action, message: SendbirdChatSDK.BaseMessage, indexPath: Foundation.IndexPath)
    case shouldHandleUncachedTemplateKeys(keys: [Swift.String], cell: SendbirdAIAgentCore.BaseMessageCellType)
    case shouldHandleUncachedTemplateImages(cacheData: [Swift.String : Swift.String], cell: SendbirdAIAgentCore.BaseMessageCellType)
    case didSubmitCSAT(data: SendbirdAIAgentCore.SBASatisfactionData)
    case didStartNewConversation(conversation: SendbirdChatSDK.Conversation, cell: SendbirdAIAgentCore.BaseMessageCellType)
    case didTapScrollToButton(animated: Swift.Bool)
    case didSelectRetry
    case willDisplay(cell: UIKit.UITableViewCell, indexPath: Foundation.IndexPath)
    case didTapMessage(message: SendbirdChatSDK.BaseMessage, indexPath: Foundation.IndexPath)
    case didScroll(scrollView: UIKit.UIScrollView)
    case didSelectScrollToBottonWithOptions(options: SendbirdAIAgentCore.SBAScrollOptions, animated: Swift.Bool)
    case didTapRetryFailedMessage(message: SendbirdChatSDK.BaseMessage)
    case didTapDeleteFailedMessage(message: SendbirdChatSDK.BaseMessage)
    case didTapCopyMessage(message: SendbirdChatSDK.BaseMessage)
    case didTapDeleteMessage(message: SendbirdChatSDK.BaseMessage)
    case didTapEditMessage(message: SendbirdChatSDK.BaseMessage)
    case didTapSaveMessage(message: SendbirdChatSDK.BaseMessage)
    case didDismissMenuForCell(cell: UIKit.UITableViewCell)
    case didFailScrollToMessageId(messageId: Swift.Int64, needToSearch: Swift.Bool)
    case didFailScrollToMessage(message: SendbirdChatSDK.BaseMessage, needToSearch: Swift.Bool)
    case didTapMessageLink(message: SendbirdChatSDK.BaseMessage, url: Foundation.URL)
    case didReceiveError(error: SendbirdChatSDK.SBError, isBlocker: Swift.Bool)
  }
}
extension SendbirdAIAgentCore.SBAConversationModule {
  @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(SBAConversationModuleList) @objcMembers @_Concurrency.MainActor @preconcurrency open class List : SendbirdAIAgentCore.BaseView, UIKit.UITableViewDelegate, UIKit.UITableViewDataSource, UIKit.UIScrollViewDelegate {
    @objc @SendbirdAIAgentCore.LayoutSlot @_projectedValueProperty($tableView) @_Concurrency.MainActor @preconcurrency public var tableView: UIKit.UITableView? {
      @objc get
      @objc set
      _modify
    }
    @_Concurrency.MainActor @preconcurrency public var $tableView: SendbirdAIAgentCore.SBALayoutSlot {
      get
    }
    @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
    @objc deinit
    @_Concurrency.MainActor @preconcurrency @objc open func tableView(_ tableView: UIKit.UITableView, heightForHeaderInSection section: Swift.Int) -> CoreFoundation.CGFloat
    @_Concurrency.MainActor @preconcurrency @objc open func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
    @_Concurrency.MainActor @preconcurrency @objc open func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
    @_Concurrency.MainActor @preconcurrency @objc open func tableView(_ tableView: UIKit.UITableView, willDisplay cell: UIKit.UITableViewCell, forRowAt indexPath: Foundation.IndexPath)
    @_Concurrency.MainActor @preconcurrency @objc open func tableView(_ tableView: UIKit.UITableView, heightForRowAt indexPath: Foundation.IndexPath) -> CoreFoundation.CGFloat
    @_Concurrency.MainActor @preconcurrency @objc open func tableView(_ tableView: UIKit.UITableView, didEndDisplaying cell: UIKit.UITableViewCell, forRowAt indexPath: Foundation.IndexPath)
    @_Concurrency.MainActor @preconcurrency @objc dynamic open func setupViews()
    @objc @_Concurrency.MainActor @preconcurrency open func layoutBody() -> UIKit.UIView
    @_Concurrency.MainActor @preconcurrency @objc public func scrollViewDidScroll(_ scrollView: UIKit.UIScrollView)
  }
}
@objc @_inheritsConvenienceInitializers public class SBAConversationModule : ObjectiveC.NSObject {
  public static var HeaderComponent: SendbirdAIAgentCore.SBAConversationModule.Header.Type
  public static var ListComponent: SendbirdAIAgentCore.SBAConversationModule.List.Type
  public static var InputComponent: SendbirdAIAgentCore.SBAConversationModule.Input.Type
  @objc override dynamic public init()
  @objc deinit
}
extension SendbirdAIAgentCore.SBAConversationModule.List {
  @objc @_Concurrency.MainActor @preconcurrency public static var AdminMessageCell: SendbirdAIAgentCore.BaseMessageCellType.Type
  @objc @_Concurrency.MainActor @preconcurrency public static var UserMessageCell: SendbirdAIAgentCore.BaseMessageCellType.Type
  @objc @_Concurrency.MainActor @preconcurrency public static var FileMessageCell: SendbirdAIAgentCore.BaseMessageCellType.Type
  @objc @_Concurrency.MainActor @preconcurrency public static var TypingIndicatorMessageCell: SendbirdAIAgentCore.BaseMessageCellType.Type
  @objc @_Concurrency.MainActor @preconcurrency public static var UnknownMessageCell: SendbirdAIAgentCore.BaseMessageCellType.Type
}
extension SendbirdAIAgentCore.SBAConversationModule.Input {
  @objc @_Concurrency.MainActor @preconcurrency public static var MessageInputView: SendbirdAIAgentCore.SBAMessageInputView.Type
}
public typealias BaseMessageCellType = SendbirdAIAgentCore.SBABaseMessageCellV2
@objc @objcMembers @_Concurrency.MainActor @preconcurrency open class SBAConversationViewController : SendbirdAIAgentCore.SBABaseViewController, SendbirdAIAgentCore.SBAConversationModuleHeaderDelegate {
  @available(*, unavailable)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc @_Concurrency.MainActor @preconcurrency required public init(aiAgentId: Swift.String, channelURL: Swift.String?, displaysLocalCachedListFirst: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open var preferredStatusBarStyle: UIKit.UIStatusBarStyle {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func loadView()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency override open var bodyViewSafeAreaAnchor: SendbirdAIAgentCore.SafeAreaAnchor {
    get
  }
  @objc deinit
  @_Concurrency.MainActor @preconcurrency @objc override open func setupViews()
  @_Concurrency.MainActor @preconcurrency @objc override open func setupLayouts()
  @_Concurrency.MainActor @preconcurrency @objc override open func setupStyles()
  @objc @_Concurrency.MainActor @preconcurrency open func layoutBody() -> UIKit.UIView
  @_Concurrency.MainActor @preconcurrency @objc override open func updateStyles()
  @_Concurrency.MainActor @preconcurrency @objc open func imagePickerControllerDidCancel(_ picker: UIKit.UIImagePickerController)
  @_Concurrency.MainActor @preconcurrency open func picker(_ picker: PhotosUI.PHPickerViewController, didFinishPicking results: [PhotosUI.PHPickerResult])
  @_Concurrency.MainActor @preconcurrency open func conversationModule(_ headerComponent: SendbirdAIAgentCore.SBAConversationModule.Header, requestsDataFor event: SendbirdAIAgentCore.SBAConversationModule.Header.DataSourceEvent) -> Any?
  @_Concurrency.MainActor @preconcurrency open func conversationModule(_ headerComponent: SendbirdAIAgentCore.SBAConversationModule.Header, didReceiveEvent event: SendbirdAIAgentCore.SBAConversationModule.Header.DelegateEvent)
  @_Concurrency.MainActor @preconcurrency open func conversationModule(_ listComponent: SendbirdAIAgentCore.SBAConversationModule.List, didReceiveEvent event: SendbirdAIAgentCore.SBAConversationModule.List.DelegateEvent)
  @_Concurrency.MainActor @preconcurrency open func conversationModule(_ listComponent: SendbirdAIAgentCore.SBAConversationModule.List, requestsDataFor event: SendbirdAIAgentCore.SBAConversationModule.List.DataSourceEvent) -> Any?
  @_Concurrency.MainActor @preconcurrency open func conversationModule(_ inputComponent: SendbirdAIAgentCore.SBAConversationModule.Input, didReceiveEvent event: SendbirdAIAgentCore.SBAConversationModule.Input.DelegateEvent)
  @_Concurrency.MainActor @preconcurrency open func conversationModule(_ inputComponent: SendbirdAIAgentCore.SBAConversationModule.Input, requestsDataFor event: SendbirdAIAgentCore.SBAConversationModule.Input.DataSourceEvent) -> Any?
}
extension SendbirdAIAgentCore.SBAConversationViewController : UIKit.UIGestureRecognizerDelegate, UIKit.UIViewControllerTransitioningDelegate, PhotosUI.PHPickerViewControllerDelegate, UIKit.UIImagePickerControllerDelegate, UIKit.UIDocumentPickerDelegate, UIKit.UIDocumentInteractionControllerDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic open func gestureRecognizer(_ gestureRecognizer: UIKit.UIGestureRecognizer, shouldRecognizeSimultaneouslyWith otherGestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency @objc dynamic open func imagePickerController(_ picker: UIKit.UIImagePickerController, didFinishPickingMediaWithInfo info: [UIKit.UIImagePickerController.InfoKey : Any])
  @_Concurrency.MainActor @preconcurrency @objc dynamic open func documentPicker(_ controller: UIKit.UIDocumentPickerViewController, didPickDocumentsAt urls: [Foundation.URL])
  @_Concurrency.MainActor @preconcurrency @objc dynamic open func documentInteractionControllerViewControllerForPreview(_ controller: UIKit.UIDocumentInteractionController) -> UIKit.UIViewController
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class SBACoverImageView : SendbirdAIAgentCore.BaseView {
  @_Concurrency.MainActor @preconcurrency public func setImage(with coverURL: Swift.String, placeholder image: UIKit.UIImage?, placeholderIconSize iconSize: CoreFoundation.CGSize?, tintColor: UIKit.UIColor?, backgroundColor: UIKit.UIColor?)
  @_Concurrency.MainActor @preconcurrency public func setIconImage(iconImage: UIKit.UIImage, tintColor: UIKit.UIColor?, backgroundColor: UIKit.UIColor? = nil, iconSize: CoreFoundation.CGSize?)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class SBAEmptyView : SendbirdAIAgentCore.SBAView {
  @_Concurrency.MainActor @preconcurrency override weak public var messengerInfo: SendbirdAIAgentCore.SBAMessengerInfo? {
    get
    set
  }
  @objc deinit
  @_Concurrency.MainActor @preconcurrency open func layoutBody() -> UIKit.UIView
}
public enum SBAEntryPoint {
  case conversation
  case conversationList
  public static let `default`: SendbirdAIAgentCore.SBAEntryPoint
  public static func == (a: SendbirdAIAgentCore.SBAEntryPoint, b: SendbirdAIAgentCore.SBAEntryPoint) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc public enum MediaResourceType : Swift.Int {
  case camera
  case library
  case document
  case unknown
  case delete
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum MessagePosition : Swift.Int {
  case left
  case right
  case center
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum MessageGroupPosition : Swift.Int {
  case none
  case top
  case middle
  case bottom
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum SBAMessageReceiptState : Swift.Int {
  case none
  case read
  case notUsed
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum SBAErrorType : Swift.Error {
  case initializeFailed
  case connectFailed
  case authenticateFailed
  case invalidResponse
  case invalidChannel
  case invalidChannelURL
  case invalidInitialization
  case invalidInstance
  case invalidAuthentication
  case invalidAgentInfo
  case unknownError
  public static func == (a: SendbirdAIAgentCore.SBAErrorType, b: SendbirdAIAgentCore.SBAErrorType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct SBAFeedbackAnswer {
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency open class SBAFileMessageCellV2 : SendbirdAIAgentCore.SBABaseMessageCellV2 {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func setupStyles()
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func setupActions()
  @_Concurrency.MainActor @preconcurrency override public func configure(with configuration: SendbirdAIAgentCore.SBABaseMessageCellParams)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@propertyWrapper public class SBAIconImage {
  public var wrappedValue: UIKit.UIImage {
    get
    set
  }
  public var projectedValue: SendbirdAIAgentCore.SBAIconImage {
    get
  }
  public init()
  public func load(with key: Swift.String, bundle: Foundation.Bundle? = nil)
  public func reset()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class SBAIconSet {
  public static var iconBotFilled: UIKit.UIImage {
    get
    set
  }
  public static var iconSend: UIKit.UIImage {
    get
    set
  }
  public struct Metric {
    public static let defaultIconSize: CoreFoundation.CGSize
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency open class SBALauncherConversationListViewController : SendbirdAIAgentCore.SBAConversationListViewController {
  @_Concurrency.MainActor @preconcurrency @objc required public init(aiAgentId: Swift.String)
  @objc deinit
}
extension SendbirdAIAgentCore.SBALauncherOptions {
  public class Layout {
    public var position: SendbirdAIAgentCore.LauncherPosition
    public var margin: SendbirdAIAgentCore.LauncherAreaMargin
    public var useSafeArea: Swift.Bool
    public init(position: SendbirdAIAgentCore.LauncherPosition = .default, margin: SendbirdAIAgentCore.LauncherAreaMargin = .default, useSafeArea: Swift.Bool = true)
    public static var `default`: SendbirdAIAgentCore.SBALauncherOptions.Layout
    @objc deinit
  }
  public enum DisplayStyle {
    case fullscreen(_: SendbirdAIAgentCore.SBALauncherOptions.DisplayStyle.FullscreenStyle = .default)
    case overlay(_: SendbirdAIAgentCore.SBALauncherOptions.DisplayStyle.OverlayStyle = .default)
    public static var `default`: SendbirdAIAgentCore.SBALauncherOptions.DisplayStyle
    public class FullscreenStyle {
      public var presentationStyle: UIKit.UIModalPresentationStyle
      public var parentController: UIKit.UIViewController?
      public init(presentationStyle: UIKit.UIModalPresentationStyle = .fullScreen, parentController: UIKit.UIViewController? = nil)
      public static var `default`: SendbirdAIAgentCore.SBALauncherOptions.DisplayStyle.FullscreenStyle
      @objc deinit
    }
    public class OverlayStyle {
      public var spacing: CoreFoundation.CGFloat
      public var overlayLauncher: Swift.Bool
      public init(spacing: CoreFoundation.CGFloat = 12, overlayLauncher: Swift.Bool = false)
      public static var `default`: SendbirdAIAgentCore.SBALauncherOptions.DisplayStyle.OverlayStyle
      @objc deinit
    }
  }
}
public struct SBALauncherOptions {
  public let parentView: UIKit.UIView?
  public let entryPoint: SendbirdAIAgentCore.SBAEntryPoint
  public let layout: SendbirdAIAgentCore.SBALauncherOptions.Layout
  public let displayStyle: SendbirdAIAgentCore.SBALauncherOptions.DisplayStyle
  public static var `default`: SendbirdAIAgentCore.SBALauncherOptions
  public init(parentView: UIKit.UIView? = nil, entryPoint: SendbirdAIAgentCore.SBAEntryPoint = .default, layout: SendbirdAIAgentCore.SBALauncherOptions.Layout = .default, displayStyle: SendbirdAIAgentCore.SBALauncherOptions.DisplayStyle = .default)
}
public struct LauncherAreaMargin {
  public let leading: CoreFoundation.CGFloat
  public let trailing: CoreFoundation.CGFloat
  public let top: CoreFoundation.CGFloat
  public let bottom: CoreFoundation.CGFloat
  public static var `default`: SendbirdAIAgentCore.LauncherAreaMargin
  public init(leading: CoreFoundation.CGFloat, trailing: CoreFoundation.CGFloat, top: CoreFoundation.CGFloat, bottom: CoreFoundation.CGFloat)
  public func update(leading: CoreFoundation.CGFloat? = nil, trailing: CoreFoundation.CGFloat? = nil, top: CoreFoundation.CGFloat? = nil, bottom: CoreFoundation.CGFloat? = nil) -> SendbirdAIAgentCore.LauncherAreaMargin
}
public enum LauncherPosition {
  case leadingTop
  case trailingTop
  case leadingBottom
  case trailingBottom
  public static var `default`: SendbirdAIAgentCore.LauncherPosition
  public static func == (a: SendbirdAIAgentCore.LauncherPosition, b: SendbirdAIAgentCore.LauncherPosition) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol SBALinearLayoutable {
  static func hStack(spacing: CoreFoundation.CGFloat, alignment: SendbirdAIAgentCore.SBALinearLayout.HorizontalAlignment, distribution: UIKit.UIStackView.Distribution, color: UIKit.UIColor, @SendbirdAIAgentCore.SBAViewBuilder _ content: () -> [UIKit.UIView]) -> UIKit.UIStackView
  static func vStack(spacing: CoreFoundation.CGFloat, alignment: SendbirdAIAgentCore.SBALinearLayout.VerticalAlignment, distribution: UIKit.UIStackView.Distribution, color: UIKit.UIColor, @SendbirdAIAgentCore.SBAViewBuilder _ content: () -> [UIKit.UIView]) -> UIKit.UIStackView
  static func zStack(_ builder: (inout SendbirdAIAgentCore.SBALinearLayout.ZStackContainer) -> Swift.Void) -> UIKit.UIView
}
extension SendbirdAIAgentCore.SBALinearLayoutable {
  public static func hStack(spacing: CoreFoundation.CGFloat = 0, alignment: SendbirdAIAgentCore.SBALinearLayout.HorizontalAlignment = .fill, distribution: UIKit.UIStackView.Distribution = .fill, color: UIKit.UIColor = .clear, @SendbirdAIAgentCore.SBAViewBuilder _ content: () -> [UIKit.UIView]) -> UIKit.UIStackView
  public static func vStack(spacing: CoreFoundation.CGFloat = 0, alignment: SendbirdAIAgentCore.SBALinearLayout.VerticalAlignment = .fill, distribution: UIKit.UIStackView.Distribution = .fill, color: UIKit.UIColor = .clear, @SendbirdAIAgentCore.SBAViewBuilder _ content: () -> [UIKit.UIView]) -> UIKit.UIStackView
  public static func zStack(_ builder: (inout SendbirdAIAgentCore.SBALinearLayout.ZStackContainer) -> Swift.Void) -> UIKit.UIView
}
public struct SBALinearLayout : SendbirdAIAgentCore.SBALinearLayoutable {
  public enum HorizontalAlignment {
    case top
    case center
    case bottom
    case fill
    public static func == (a: SendbirdAIAgentCore.SBALinearLayout.HorizontalAlignment, b: SendbirdAIAgentCore.SBALinearLayout.HorizontalAlignment) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum HorizontalGravity {
    case left
    case center
    case right
    case fill
    public static func == (a: SendbirdAIAgentCore.SBALinearLayout.HorizontalGravity, b: SendbirdAIAgentCore.SBALinearLayout.HorizontalGravity) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum VerticalGravity {
    case top
    case center
    case bottom
    case fill
    public static func == (a: SendbirdAIAgentCore.SBALinearLayout.VerticalGravity, b: SendbirdAIAgentCore.SBALinearLayout.VerticalGravity) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum VerticalAlignment {
    case left
    case center
    case right
    case fill
    public static func == (a: SendbirdAIAgentCore.SBALinearLayout.VerticalAlignment, b: SendbirdAIAgentCore.SBALinearLayout.VerticalAlignment) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension SendbirdAIAgentCore.SBALinearLayout {
  @_hasMissingDesignatedInitializers public class ZStackContainer {
    @discardableResult
    public func add(_ view: UIKit.UIView?, horizontal: SendbirdAIAgentCore.SBALinearLayout.HorizontalGravity = .fill, vertical: SendbirdAIAgentCore.SBALinearLayout.VerticalGravity = .fill, offset: SendbirdAIAgentCore.SBAGravityOffset = .init()) -> SendbirdAIAgentCore.SBALinearLayout.ZStackContainer
    @objc deinit
  }
}
@_functionBuilder public enum SBAViewBuilder {
  public static func buildBlock(_ components: UIKit.UIView...) -> [UIKit.UIView]
  public static func buildBlock(_ components: [UIKit.UIView?]...) -> [UIKit.UIView]
  public static func buildArray(_ components: [[UIKit.UIView?]]) -> [UIKit.UIView]
  public static func buildOptional(_ component: [UIKit.UIView]?) -> [UIKit.UIView]
  public static func buildEither(first component: [UIKit.UIView?]) -> [UIKit.UIView]
  public static func buildEither(second component: [UIKit.UIView?]) -> [UIKit.UIView]
  public static func buildExpression(_ expression: UIKit.UIView) -> [UIKit.UIView]
  public static func buildExpression(_ expression: UIKit.UIView?) -> [UIKit.UIView]
  public static func buildExpression(_ expression: [UIKit.UIView]) -> [UIKit.UIView]
  public static func buildFinalResult(_ component: [UIKit.UIView]) -> [UIKit.UIView]
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class SBASpacer : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency public init(width: CoreFoundation.CGFloat = 0, height: CoreFoundation.CGFloat = 0, hidden: Swift.Bool = false)
  @objc deinit
}
public protocol SBASpaceable {
  var top: CoreFoundation.CGFloat { get set }
  var left: CoreFoundation.CGFloat { get set }
  var bottom: CoreFoundation.CGFloat { get set }
  var right: CoreFoundation.CGFloat { get set }
  init(top: CoreFoundation.CGFloat, left: CoreFoundation.CGFloat, bottom: CoreFoundation.CGFloat, right: CoreFoundation.CGFloat)
}
extension SendbirdAIAgentCore.SBASpaceable {
  public init(vertical: CoreFoundation.CGFloat = 0, horizontal: CoreFoundation.CGFloat = 0)
  public init(all value: CoreFoundation.CGFloat)
  public func isEqual(to other: any SendbirdAIAgentCore.SBASpaceable) -> Swift.Bool
}
public struct SBAPadding : SendbirdAIAgentCore.SBASpaceable {
  public var top: CoreFoundation.CGFloat
  public var left: CoreFoundation.CGFloat
  public var bottom: CoreFoundation.CGFloat
  public var right: CoreFoundation.CGFloat
  public init(top: CoreFoundation.CGFloat = 0, left: CoreFoundation.CGFloat = 0, bottom: CoreFoundation.CGFloat = 0, right: CoreFoundation.CGFloat = 0)
}
public struct SBAMargin : SendbirdAIAgentCore.SBASpaceable {
  public var top: CoreFoundation.CGFloat
  public var left: CoreFoundation.CGFloat
  public var bottom: CoreFoundation.CGFloat
  public var right: CoreFoundation.CGFloat
  public init(top: CoreFoundation.CGFloat = 0, left: CoreFoundation.CGFloat = 0, bottom: CoreFoundation.CGFloat = 0, right: CoreFoundation.CGFloat = 0)
}
public struct SBAGravityOffset : SendbirdAIAgentCore.SBASpaceable {
  public var top: CoreFoundation.CGFloat
  public var left: CoreFoundation.CGFloat
  public var bottom: CoreFoundation.CGFloat
  public var right: CoreFoundation.CGFloat
  public init(top: CoreFoundation.CGFloat = 0, left: CoreFoundation.CGFloat = 0, bottom: CoreFoundation.CGFloat = 0, right: CoreFoundation.CGFloat = 0)
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class SBALayoutSlot : SendbirdAIAgentCore.BaseView {
  @_Concurrency.MainActor @preconcurrency final public let containerView: UIKit.UIView
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor @preconcurrency @objc dynamic public init()
  @objc deinit
}
extension UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency public func withLayoutSlot(onDebug: Swift.Bool = false) -> SendbirdAIAgentCore.SBALayoutSlot
}
extension Swift.Array where Element == UIKit.UIView {
  public func asLayoutSlots() -> [UIKit.UIView]
}
extension Swift.Array where Element == UIKit.UIView? {
  public func asLayoutSlots() -> [UIKit.UIView]
}
extension UIKit.UIView : SendbirdAIAgentCore.SBALayoutSlotType {
}
public protocol SBALayoutSlotType : AnyObject {
  func set(view: UIKit.UIView?) -> SendbirdAIAgentCore.SBALayoutSlot
  func set(padding: SendbirdAIAgentCore.SBAPadding) -> SendbirdAIAgentCore.SBALayoutSlot
  func set(margin: SendbirdAIAgentCore.SBAMargin) -> SendbirdAIAgentCore.SBALayoutSlot
}
extension SendbirdAIAgentCore.SBALayoutSlotType where Self : UIKit.UIView {
  @discardableResult
  public func set(padding: SendbirdAIAgentCore.SBAPadding) -> SendbirdAIAgentCore.SBALayoutSlot
  @discardableResult
  public func set(margin: SendbirdAIAgentCore.SBAMargin) -> SendbirdAIAgentCore.SBALayoutSlot
  @discardableResult
  public func set(view: UIKit.UIView?) -> SendbirdAIAgentCore.SBALayoutSlot
}
@_hasMissingDesignatedInitializers public class SBALocalization {
  public static var common: SendbirdAIAgentCore.SBALocalization.Common {
    get
  }
  public static var conversation: SendbirdAIAgentCore.SBALocalization.Conversation {
    get
  }
  public static var conversationList: SendbirdAIAgentCore.SBALocalization.ConversationList {
    get
  }
  @objc deinit
}
extension SendbirdAIAgentCore.SBALocalization {
  public static func updateLocale(_ locale: Foundation.Locale)
}
extension SendbirdAIAgentCore.SBALocalization {
  @_hasMissingDesignatedInitializers public class Common {
    @SendbirdAIAgentCore.SBALocalizationString @_projectedValueProperty($cancel) public var cancel: Swift.String {
      get
      set
      _modify
    }
    public var $cancel: SendbirdAIAgentCore.SBALocalizationString {
      get
    }
    @SendbirdAIAgentCore.SBALocalizationString @_projectedValueProperty($retry) public var retry: Swift.String {
      get
      set
      _modify
    }
    public var $retry: SendbirdAIAgentCore.SBALocalizationString {
      get
    }
    @SendbirdAIAgentCore.SBALocalizationString @_projectedValueProperty($save) public var save: Swift.String {
      get
      set
      _modify
    }
    public var $save: SendbirdAIAgentCore.SBALocalizationString {
      get
    }
    @SendbirdAIAgentCore.SBALocalizationString @_projectedValueProperty($delete) public var delete: Swift.String {
      get
      set
      _modify
    }
    public var $delete: SendbirdAIAgentCore.SBALocalizationString {
      get
    }
    @SendbirdAIAgentCore.SBALocalizationString @_projectedValueProperty($settings) public var settings: Swift.String {
      get
      set
      _modify
    }
    public var $settings: SendbirdAIAgentCore.SBALocalizationString {
      get
    }
    @SendbirdAIAgentCore.SBALocalizationString @_projectedValueProperty($submit) public var submit: Swift.String {
      get
      set
      _modify
    }
    public var $submit: SendbirdAIAgentCore.SBALocalizationString {
      get
    }
    public var photo: SendbirdAIAgentCore.SBALocalization.Common.Photo
    public var toast: SendbirdAIAgentCore.SBALocalization.Common.Toast
    public var empty: SendbirdAIAgentCore.SBALocalization.Common.Empty
    public var alert: SendbirdAIAgentCore.SBALocalization.Common.Alert
    public var dateFormat: SendbirdAIAgentCore.SBALocalization.Common.DateFormat
    public var error: SendbirdAIAgentCore.SBALocalization.Common.Error
    @_hasMissingDesignatedInitializers public class Photo {
      @SendbirdAIAgentCore.SBALocalizationString @_projectedValueProperty($camera) public var camera: Swift.String {
        get
        set
        _modify
      }
      public var $camera: SendbirdAIAgentCore.SBALocalizationString {
        get
      }
      @SendbirdAIAgentCore.SBALocalizationString @_projectedValueProperty($photoLibrary) public var photoLibrary: Swift.String {
        get
        set
        _modify
      }
      public var $photoLibrary: SendbirdAIAgentCore.SBALocalizationString {
        get
      }
      @SendbirdAIAgentCore.SBALocalizationString @_projectedValueProperty($document) public var document: Swift.String {
        get
        set
        _modify
      }
      public var $document: SendbirdAIAgentCore.SBALocalizationString {
        get
      }
      @SendbirdAIAgentCore.SBALocalizationString @_projectedValueProperty($viewLibrary) public var viewLibrary: Swift.String {
        get
        set
        _modify
      }
      public var $viewLibrary: SendbirdAIAgentCore.SBALocalizationString {
        get
      }
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class Toast {
      @SendbirdAIAgentCore.SBALocalizationString @_projectedValueProperty($successDownloadFile) public var successDownloadFile: Swift.String {
        get
        set
        _modify
      }
      public var $successDownloadFile: SendbirdAIAgentCore.SBALocalizationString {
        get
      }
      @SendbirdAIAgentCore.SBALocalizationString @_projectedValueProperty($failureDownloadFile) public var failureDownloadFile: Swift.String {
        get
        set
        _modify
      }
      public var $failureDownloadFile: SendbirdAIAgentCore.SBALocalizationString {
        get
      }
      @SendbirdAIAgentCore.SBALocalizationString @_projectedValueProperty($failureOpenFile) public var failureOpenFile: Swift.String {
        get
        set
        _modify
      }
      public var $failureOpenFile: SendbirdAIAgentCore.SBALocalizationString {
        get
      }
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class Empty {
      @SendbirdAIAgentCore.SBALocalizationString @_projectedValueProperty($conversation) public var conversation: Swift.String {
        get
        set
        _modify
      }
      public var $conversation: SendbirdAIAgentCore.SBALocalizationString {
        get
      }
      @SendbirdAIAgentCore.SBALocalizationString @_projectedValueProperty($messages) public var messages: Swift.String {
        get
        set
        _modify
      }
      public var $messages: SendbirdAIAgentCore.SBALocalizationString {
        get
      }
      @SendbirdAIAgentCore.SBALocalizationString @_projectedValueProperty($error) public var error: Swift.String {
        get
        set
        _modify
      }
      public var $error: SendbirdAIAgentCore.SBALocalizationString {
        get
      }
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class Alert {
      @SendbirdAIAgentCore.SBALocalizationString @_projectedValueProperty($delete) public var delete: Swift.String {
        get
        set
        _modify
      }
      public var $delete: SendbirdAIAgentCore.SBALocalizationString {
        get
      }
      @SendbirdAIAgentCore.SBALocalizationString @_projectedValueProperty($allowCameraAccess) public var allowCameraAccess: Swift.String {
        get
        set
        _modify
      }
      public var $allowCameraAccess: SendbirdAIAgentCore.SBALocalizationString {
        get
      }
      @SendbirdAIAgentCore.SBALocalizationString @_projectedValueProperty($allowPhotoLibraryAccess) public var allowPhotoLibraryAccess: Swift.String {
        get
        set
        _modify
      }
      public var $allowPhotoLibraryAccess: SendbirdAIAgentCore.SBALocalizationString {
        get
      }
      @SendbirdAIAgentCore.SBALocalizationString @_projectedValueProperty($allowPhotoLibraryAccessMessage) public var allowPhotoLibraryAccessMessage: Swift.String {
        get
        set
        _modify
      }
      public var $allowPhotoLibraryAccessMessage: SendbirdAIAgentCore.SBALocalizationString {
        get
      }
      @SendbirdAIAgentCore.SBALocalizationString @_projectedValueProperty($allowMicrophoneAccess) public var allowMicrophoneAccess: Swift.String {
        get
        set
        _modify
      }
      public var $allowMicrophoneAccess: SendbirdAIAgentCore.SBALocalizationString {
        get
      }
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class DateFormat {
      @SendbirdAIAgentCore.SBALocalizationString @_projectedValueProperty($yesterday) public var yesterday: Swift.String {
        get
        set
        _modify
      }
      public var $yesterday: SendbirdAIAgentCore.SBALocalizationString {
        get
      }
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class Error {
      @SendbirdAIAgentCore.SBALocalizationString @_projectedValueProperty($exceededSizeLimit) public var exceededSizeLimit: Swift.String {
        get
        set
        _modify
      }
      public var $exceededSizeLimit: SendbirdAIAgentCore.SBALocalizationString {
        get
      }
      public var exceededSizeLimitString: Swift.String {
        get
      }
      @objc deinit
    }
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class Conversation {
    public var header: SendbirdAIAgentCore.SBALocalization.Conversation.Header
    public var input: SendbirdAIAgentCore.SBALocalization.Conversation.Input
    public var list: SendbirdAIAgentCore.SBALocalization.Conversation.List
    @_hasMissingDesignatedInitializers public class Header {
      @SendbirdAIAgentCore.SBALocalizationString @_projectedValueProperty($noMembers) public var noMembers: Swift.String {
        get
        set
        _modify
      }
      public var $noMembers: SendbirdAIAgentCore.SBALocalizationString {
        get
      }
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class Input {
      public var placeholder: SendbirdAIAgentCore.SBALocalization.Conversation.Input.Placeholder
      @_hasMissingDesignatedInitializers public class Placeholder {
        @SendbirdAIAgentCore.SBALocalizationString @_projectedValueProperty($normal) public var normal: Swift.String {
          get
          set
          _modify
        }
        public var $normal: SendbirdAIAgentCore.SBALocalizationString {
          get
        }
        @SendbirdAIAgentCore.SBALocalizationString @_projectedValueProperty($streaming) public var streaming: Swift.String {
          get
          set
          _modify
        }
        public var $streaming: SendbirdAIAgentCore.SBALocalizationString {
          get
        }
        @SendbirdAIAgentCore.SBALocalizationString @_projectedValueProperty($closeConversation) public var closeConversation: Swift.String {
          get
          set
          _modify
        }
        public var $closeConversation: SendbirdAIAgentCore.SBALocalizationString {
          get
        }
        @objc deinit
      }
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class List {
      public var unknownMessage: SendbirdAIAgentCore.SBALocalization.Conversation.List.UnknownMessage
      public var poweredByMessage: SendbirdAIAgentCore.SBALocalization.Conversation.List.PoweredByMessage
      public var messageTemplate: SendbirdAIAgentCore.SBALocalization.Conversation.List.MessageTemplate
      public var messageProfileView: SendbirdAIAgentCore.SBALocalization.Conversation.List.MessageProfileView
      public var newMessageInfo: SendbirdAIAgentCore.SBALocalization.Conversation.List.NewMessageInfo
      public var user: SendbirdAIAgentCore.SBALocalization.Conversation.List.User
      public var form: SendbirdAIAgentCore.SBALocalization.Conversation.List.Form
      public var feedback: SendbirdAIAgentCore.SBALocalization.Conversation.List.Feedback
      public var closed: SendbirdAIAgentCore.SBALocalization.Conversation.List.Closed
      public var csat: SendbirdAIAgentCore.SBALocalization.Conversation.List.CSAT
      @_hasMissingDesignatedInitializers public class UnknownMessage {
        @SendbirdAIAgentCore.SBALocalizationString @_projectedValueProperty($title) public var title: Swift.String {
          get
          set
          _modify
        }
        public var $title: SendbirdAIAgentCore.SBALocalizationString {
          get
        }
        @SendbirdAIAgentCore.SBALocalizationString @_projectedValueProperty($description) public var description: Swift.String {
          get
          set
          _modify
        }
        public var $description: SendbirdAIAgentCore.SBALocalizationString {
          get
        }
        @objc deinit
      }
      @_hasMissingDesignatedInitializers public class PoweredByMessage {
        @SendbirdAIAgentCore.SBALocalizationString @_projectedValueProperty($title) public var title: Swift.String {
          get
          set
          _modify
        }
        public var $title: SendbirdAIAgentCore.SBALocalizationString {
          get
        }
        @objc deinit
      }
      @_hasMissingDesignatedInitializers public class MessageTemplate {
        @SendbirdAIAgentCore.SBALocalizationString @_projectedValueProperty($errorTitle) public var errorTitle: Swift.String {
          get
          set
          _modify
        }
        public var $errorTitle: SendbirdAIAgentCore.SBALocalizationString {
          get
        }
        @SendbirdAIAgentCore.SBALocalizationString @_projectedValueProperty($errorSubtitle) public var errorSubtitle: Swift.String {
          get
          set
          _modify
        }
        public var $errorSubtitle: SendbirdAIAgentCore.SBALocalizationString {
          get
        }
        @objc deinit
      }
      @_hasMissingDesignatedInitializers public class MessageProfileView {
        public var typersCount: (_ count: Swift.Int) -> Swift.String
        @objc deinit
      }
      @_hasMissingDesignatedInitializers public class NewMessageInfo {
        @SendbirdAIAgentCore.SBALocalizationString @_projectedValueProperty($countFormatTitle) public var countFormatTitle: Swift.String {
          get
          set
          _modify
        }
        public var $countFormatTitle: SendbirdAIAgentCore.SBALocalizationString {
          get
        }
        @SendbirdAIAgentCore.SBALocalizationString @_projectedValueProperty($maxCountFormatTitle) public var maxCountFormatTitle: Swift.String {
          get
          set
          _modify
        }
        public var $maxCountFormatTitle: SendbirdAIAgentCore.SBALocalizationString {
          get
        }
        public var countTitle: (Swift.Int) -> Swift.String {
          get
          set
        }
        @objc deinit
      }
      @_hasMissingDesignatedInitializers public class User {
        @SendbirdAIAgentCore.SBALocalizationString @_projectedValueProperty($me) public var me: Swift.String {
          get
          set
          _modify
        }
        public var $me: SendbirdAIAgentCore.SBALocalizationString {
          get
        }
        @SendbirdAIAgentCore.SBALocalizationString @_projectedValueProperty($noName) public var noName: Swift.String {
          get
          set
          _modify
        }
        public var $noName: SendbirdAIAgentCore.SBALocalizationString {
          get
        }
        @SendbirdAIAgentCore.SBALocalizationString @_projectedValueProperty($operator) public var `operator`: Swift.String {
          get
          set
          _modify
        }
        public var $operator: SendbirdAIAgentCore.SBALocalizationString {
          get
        }
        @objc deinit
      }
      @_hasMissingDesignatedInitializers public class Form {
        @SendbirdAIAgentCore.SBALocalizationString @_projectedValueProperty($optional) public var optional: Swift.String {
          get
          set
          _modify
        }
        public var $optional: SendbirdAIAgentCore.SBALocalizationString {
          get
        }
        @SendbirdAIAgentCore.SBALocalizationString @_projectedValueProperty($errorDefault) public var errorDefault: Swift.String {
          get
          set
          _modify
        }
        public var $errorDefault: SendbirdAIAgentCore.SBALocalizationString {
          get
        }
        @SendbirdAIAgentCore.SBALocalizationString @_projectedValueProperty($errorRequired) public var errorRequired: Swift.String {
          get
          set
          _modify
        }
        public var $errorRequired: SendbirdAIAgentCore.SBALocalizationString {
          get
        }
        @SendbirdAIAgentCore.SBALocalizationString @_projectedValueProperty($fallbackMessage) public var fallbackMessage: Swift.String {
          get
          set
          _modify
        }
        public var $fallbackMessage: SendbirdAIAgentCore.SBALocalizationString {
          get
        }
        @SendbirdAIAgentCore.SBALocalizationString @_projectedValueProperty($submitDone) public var submitDone: Swift.String {
          get
          set
          _modify
        }
        public var $submitDone: SendbirdAIAgentCore.SBALocalizationString {
          get
        }
        @SendbirdAIAgentCore.SBALocalizationString @_projectedValueProperty($noResponse) public var noResponse: Swift.String {
          get
          set
          _modify
        }
        public var $noResponse: SendbirdAIAgentCore.SBALocalizationString {
          get
        }
        @objc deinit
      }
      @_hasMissingDesignatedInitializers public class Feedback {
        @SendbirdAIAgentCore.SBALocalizationString @_projectedValueProperty($commentTitle) public var commentTitle: Swift.String {
          get
          set
          _modify
        }
        public var $commentTitle: SendbirdAIAgentCore.SBALocalizationString {
          get
        }
        @SendbirdAIAgentCore.SBALocalizationString @_projectedValueProperty($commentPlaceholder) public var commentPlaceholder: Swift.String {
          get
          set
          _modify
        }
        public var $commentPlaceholder: SendbirdAIAgentCore.SBALocalizationString {
          get
        }
        @SendbirdAIAgentCore.SBALocalizationString @_projectedValueProperty($editComment) public var editComment: Swift.String {
          get
          set
          _modify
        }
        public var $editComment: SendbirdAIAgentCore.SBALocalizationString {
          get
        }
        @SendbirdAIAgentCore.SBALocalizationString @_projectedValueProperty($remove) public var remove: Swift.String {
          get
          set
          _modify
        }
        public var $remove: SendbirdAIAgentCore.SBALocalizationString {
          get
        }
        @SendbirdAIAgentCore.SBALocalizationString @_projectedValueProperty($updateDone) public var updateDone: Swift.String {
          get
          set
          _modify
        }
        public var $updateDone: SendbirdAIAgentCore.SBALocalizationString {
          get
        }
        @objc deinit
      }
      @_hasMissingDesignatedInitializers public class Closed {
        @SendbirdAIAgentCore.SBALocalizationString @_projectedValueProperty($title) public var title: Swift.String {
          get
          set
          _modify
        }
        public var $title: SendbirdAIAgentCore.SBALocalizationString {
          get
        }
        @SendbirdAIAgentCore.SBALocalizationString @_projectedValueProperty($actionTitle) public var actionTitle: Swift.String {
          get
          set
          _modify
        }
        public var $actionTitle: SendbirdAIAgentCore.SBALocalizationString {
          get
        }
        @SendbirdAIAgentCore.SBALocalizationString @_projectedValueProperty($actionInactiveTitle) public var actionInactiveTitle: Swift.String {
          get
          set
          _modify
        }
        public var $actionInactiveTitle: SendbirdAIAgentCore.SBALocalizationString {
          get
        }
        @objc deinit
      }
      @_hasMissingDesignatedInitializers public class CSAT {
        @SendbirdAIAgentCore.SBALocalizationString @_projectedValueProperty($topTitleNormal) public var topTitleNormal: Swift.String {
          get
          set
          _modify
        }
        public var $topTitleNormal: SendbirdAIAgentCore.SBALocalizationString {
          get
        }
        @SendbirdAIAgentCore.SBALocalizationString @_projectedValueProperty($topTitleSubmitted) public var topTitleSubmitted: Swift.String {
          get
          set
          _modify
        }
        public var $topTitleSubmitted: SendbirdAIAgentCore.SBALocalizationString {
          get
        }
        @SendbirdAIAgentCore.SBALocalizationString @_projectedValueProperty($resolutionTitle) public var resolutionTitle: Swift.String {
          get
          set
          _modify
        }
        public var $resolutionTitle: SendbirdAIAgentCore.SBALocalizationString {
          get
        }
        @SendbirdAIAgentCore.SBALocalizationString @_projectedValueProperty($resolutionYes) public var resolutionYes: Swift.String {
          get
          set
          _modify
        }
        public var $resolutionYes: SendbirdAIAgentCore.SBALocalizationString {
          get
        }
        @SendbirdAIAgentCore.SBALocalizationString @_projectedValueProperty($resolutionNo) public var resolutionNo: Swift.String {
          get
          set
          _modify
        }
        public var $resolutionNo: SendbirdAIAgentCore.SBALocalizationString {
          get
        }
        @SendbirdAIAgentCore.SBALocalizationString @_projectedValueProperty($satisfactionTitle) public var satisfactionTitle: Swift.String {
          get
          set
          _modify
        }
        public var $satisfactionTitle: SendbirdAIAgentCore.SBALocalizationString {
          get
        }
        @SendbirdAIAgentCore.SBALocalizationString @_projectedValueProperty($satisfactionInputPlaceholder) public var satisfactionInputPlaceholder: Swift.String {
          get
          set
          _modify
        }
        public var $satisfactionInputPlaceholder: SendbirdAIAgentCore.SBALocalizationString {
          get
        }
        @SendbirdAIAgentCore.SBALocalizationString @_projectedValueProperty($expiredTitle) public var expiredTitle: Swift.String {
          get
          set
          _modify
        }
        public var $expiredTitle: SendbirdAIAgentCore.SBALocalizationString {
          get
        }
        @objc deinit
      }
      @objc deinit
    }
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class ConversationList {
    public var header: SendbirdAIAgentCore.SBALocalization.ConversationList.Header
    public var list: SendbirdAIAgentCore.SBALocalization.ConversationList.List
    public var footer: SendbirdAIAgentCore.SBALocalization.ConversationList.Footer
    @_hasMissingDesignatedInitializers public class Header {
      @SendbirdAIAgentCore.SBALocalizationString @_projectedValueProperty($headerTitle) public var headerTitle: Swift.String {
        get
        set
        _modify
      }
      public var $headerTitle: SendbirdAIAgentCore.SBALocalizationString {
        get
      }
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class List {
      @SendbirdAIAgentCore.SBALocalizationString @_projectedValueProperty($defaultTopic) public var defaultTopic: Swift.String {
        get
        set
        _modify
      }
      public var $defaultTopic: SendbirdAIAgentCore.SBALocalizationString {
        get
      }
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class Footer {
      @SendbirdAIAgentCore.SBALocalizationString @_projectedValueProperty($actionTitle) public var actionTitle: Swift.String {
        get
        set
        _modify
      }
      public var $actionTitle: SendbirdAIAgentCore.SBALocalizationString {
        get
      }
      @SendbirdAIAgentCore.SBALocalizationString @_projectedValueProperty($actionInactiveTitle) public var actionInactiveTitle: Swift.String {
        get
        set
        _modify
      }
      public var $actionInactiveTitle: SendbirdAIAgentCore.SBALocalizationString {
        get
      }
      @objc deinit
    }
    @objc deinit
  }
}
@propertyWrapper public class SBALocalizationString {
  public var wrappedValue: Swift.String {
    get
    set
  }
  public var projectedValue: SendbirdAIAgentCore.SBALocalizationString {
    get
  }
  public init()
  public func setCurrentLocale(_ locale: Foundation.Locale)
  public func override(locale: Foundation.Locale, value: Swift.String)
  @objc deinit
}
@objc public enum SBALogType : Swift.UInt8 {
  case none = 0b00000000
  case error = 0b00000001
  case warning = 0b00000010
  case info = 0b00000100
  case all = 0b00000111
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public struct SBAMessageCSATData : Swift.Codable {
  public let type: Swift.String?
  public let visibility: Swift.Bool?
  public var dataType: SendbirdAIAgentCore.SBAMessageCSATData.DataType? {
    get
  }
  public enum DataType : Swift.String {
    case `default`
    case scoreWithResolution
    case desk
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc public enum SBAMessageInputMode : Swift.Int {
  case none
  case edit
  case file
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency open class SBAMessageInputView : SendbirdAIAgentCore.SBAView, UIKit.UITextViewDelegate {
  @SendbirdAIAgentCore.LayoutSlot @_projectedValueProperty($divider) @_Concurrency.MainActor @preconcurrency public var divider: UIKit.UIView? {
    get
    set
    _modify
  }
  @_Concurrency.MainActor @preconcurrency public var $divider: SendbirdAIAgentCore.SBALayoutSlot {
    get
  }
  @SendbirdAIAgentCore.LayoutSlot @_projectedValueProperty($attachmentFileView) @_Concurrency.MainActor @preconcurrency public var attachmentFileView: SendbirdAIAgentCore.SBAAttachmentFileCollectionView? {
    get
    set
    _modify
  }
  @_Concurrency.MainActor @preconcurrency public var $attachmentFileView: SendbirdAIAgentCore.SBALayoutSlot {
    get
  }
  @SendbirdAIAgentCore.LayoutSlot @_projectedValueProperty($inputBackgroundView) @_Concurrency.MainActor @preconcurrency public var inputBackgroundView: UIKit.UIView? {
    get
    set
    _modify
  }
  @_Concurrency.MainActor @preconcurrency public var $inputBackgroundView: SendbirdAIAgentCore.SBALayoutSlot {
    get
  }
  @SendbirdAIAgentCore.LayoutSlot @_projectedValueProperty($placeholderLabel) @_Concurrency.MainActor @preconcurrency public var placeholderLabel: UIKit.UILabel? {
    get
    set
    _modify
  }
  @_Concurrency.MainActor @preconcurrency public var $placeholderLabel: SendbirdAIAgentCore.SBALayoutSlot {
    get
  }
  @SendbirdAIAgentCore.LayoutSlot @_projectedValueProperty($textView) @_Concurrency.MainActor @preconcurrency public var textView: UIKit.UITextView? {
    get
    set
    _modify
  }
  @_Concurrency.MainActor @preconcurrency public var $textView: SendbirdAIAgentCore.SBALayoutSlot {
    get
  }
  @SendbirdAIAgentCore.LayoutSlot @_projectedValueProperty($sendButton) @_Concurrency.MainActor @preconcurrency public var sendButton: UIKit.UIButton? {
    get
    set
    _modify
  }
  @_Concurrency.MainActor @preconcurrency public var $sendButton: SendbirdAIAgentCore.SBALayoutSlot {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var textViewLeadingSpacing: CoreFoundation.CGFloat
  @_Concurrency.MainActor @preconcurrency public var isEmptyText: Swift.Bool {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var isEmptyAttachment: Swift.Bool {
    get
  }
  @_Concurrency.MainActor @preconcurrency open func updateAttachmentFileInfo(_ fileInfo: SendbirdAIAgentCore.SBAAttachmentFileInfo?, animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init()
  @available(*, unavailable, renamed: "SBAMessageInputView()")
  @_Concurrency.MainActor @preconcurrency required public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency @objc dynamic open func setupViews()
  @_Concurrency.MainActor @preconcurrency public func defaultLeadingSpacing() -> CoreFoundation.CGFloat
  @_Concurrency.MainActor @preconcurrency public func defaultTrailingSpacing() -> CoreFoundation.CGFloat
  @_Concurrency.MainActor @preconcurrency @objc dynamic open func setupLayouts()
  @_Concurrency.MainActor @preconcurrency @objc dynamic open func setupStyles()
  @_Concurrency.MainActor @preconcurrency open func updateInputState()
  @_Concurrency.MainActor @preconcurrency open func endTypingMode()
  @_Concurrency.MainActor @preconcurrency public func setupTextViewHeight(textView: UIKit.UIView)
  @_Concurrency.MainActor @preconcurrency @objc open func textViewDidChange(_ textView: UIKit.UITextView)
  @_Concurrency.MainActor @preconcurrency @objc open func textViewDidEndEditing(_ textView: UIKit.UITextView)
  @_Concurrency.MainActor @preconcurrency @objc open func textView(_ textView: UIKit.UITextView, shouldChangeTextIn range: Foundation.NSRange, replacementText text: Swift.String) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency @objc open func textView(_ textView: UIKit.UITextView, shouldInteractWith URL: Foundation.URL, in characterRange: Foundation.NSRange, interaction: UIKit.UITextItemInteraction) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency @objc open func textViewDidChangeSelection(_ textView: UIKit.UITextView)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency open class SBAMessageProfileView : SendbirdAIAgentCore.SBAView {
  @_Concurrency.MainActor @preconcurrency public static let imageSize: CoreFoundation.CGFloat
  @_Concurrency.MainActor @preconcurrency public static let iconSize: CoreFoundation.CGFloat
  @_Concurrency.MainActor @preconcurrency public var coverImage: SendbirdAIAgentCore.SBACoverImageView {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var urlString: Swift.String
  @_Concurrency.MainActor @preconcurrency public init(urlString: Swift.String = "")
  @_Concurrency.MainActor @preconcurrency open func loadCoverImage()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class SBAMessageStateViewParams {
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency open class SBAMessageStateView : SendbirdAIAgentCore.SBAView {
  @SendbirdAIAgentCore.LayoutSlot @_projectedValueProperty($timeLabel) @_Concurrency.MainActor @preconcurrency public var timeLabel: UIKit.UILabel? {
    get
    set
    _modify
  }
  @_Concurrency.MainActor @preconcurrency public var $timeLabel: SendbirdAIAgentCore.SBALayoutSlot {
    get
  }
  @_Concurrency.MainActor @preconcurrency public init(sendingState: SendbirdChatSDK.MessageSendingStatus, receiptState: SendbirdAIAgentCore.SBAMessageReceiptState)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public init()
  @_Concurrency.MainActor @preconcurrency @objc dynamic open func setupViews()
  @_Concurrency.MainActor @preconcurrency @objc dynamic open func setupLayouts()
  @_Concurrency.MainActor @preconcurrency @objc dynamic open func setupStyles()
  @_Concurrency.MainActor @preconcurrency open func configure(with configuration: SendbirdAIAgentCore.SBAMessageStateViewParams)
  @objc deinit
}
extension SendbirdAIAgentCore.SBAMessageTemplate {
  @_hasMissingDesignatedInitializers public class Action : SendbirdUIMessageTemplate.TemplateSyntax.Action {
    override public init(action: SendbirdUIMessageTemplate.TemplateSyntax.Action)
    public var urlFromActionDatas: Foundation.URL? {
      get
    }
    @objc deinit
  }
}
@_hasMissingDesignatedInitializers public class SBAMessageTemplate {
  @objc deinit
}
@_hasMissingDesignatedInitializers public class SBAMessengerInfo {
  @objc deinit
}
extension SendbirdAIAgentCore.SBAMessengerInfo {
  public var aiAgentProfileURL: Swift.String? {
    get
  }
  public var aiAgentNickname: Swift.String? {
    get
  }
  public var aiAgentId: Swift.String? {
    get
  }
}
@_hasMissingDesignatedInitializers public class SBAModuleSet {
  public static var CommonModule: SendbirdAIAgentCore.SBACommonModule.Type
  public static var ConversationModule: SendbirdAIAgentCore.SBAConversationModule.Type
  public static var ConversationListModule: SendbirdAIAgentCore.SBAConversationListModule.Type
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class SBAPoweredByMessageView : SendbirdAIAgentCore.SBAView {
  @objc deinit
}
@_hasMissingDesignatedInitializers public class SBAQueryParamsSet {
  public var conversationList: SendbirdAIAgentCore.SBAQueryParamsSet.ConversationList
  @objc deinit
}
extension SendbirdAIAgentCore.SBAQueryParamsSet {
  @_hasMissingDesignatedInitializers public class ConversationList {
    public static var queryParamsBuilder: ((SendbirdChatSDK.AIAgent.GroupChannelListQueryParams) -> ())?
    @objc deinit
  }
}
public struct SBASatisfactionData : Swift.Equatable {
  public let type: SendbirdAIAgentCore.SBAMessageCSATData.DataType
  public let isResolved: Swift.Bool?
  public let csatScore: Swift.Int64?
  public let csatReason: Swift.String?
  public static func == (lhs: SendbirdAIAgentCore.SBASatisfactionData, rhs: SendbirdAIAgentCore.SBASatisfactionData) -> Swift.Bool
}
public struct SBAScrollOptions {
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency open class BaseTableViewCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor @preconcurrency open var bodyViewSafeAreaAnchor: SendbirdAIAgentCore.SafeAreaAnchor {
    get
  }
  @_Concurrency.MainActor @preconcurrency public func setupBodyView()
  @_Concurrency.MainActor @preconcurrency public func setupBodyLayouts()
  @_Concurrency.MainActor @preconcurrency public func setupBodyContents(_ contents: UIKit.UIView)
  @_Concurrency.MainActor @preconcurrency weak public var messengerInfo: SendbirdAIAgentCore.SBAMessengerInfo? {
    get
    set
  }
  @available(iOS 3.0, *)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor @preconcurrency open class SBATableViewCell : SendbirdAIAgentCore.BaseTableViewCell {
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func layoutSubviews()
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class SBATypingIndicatorBubbleView : SendbirdAIAgentCore.SBAView {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func layoutSubviews()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency open class SBATypingIndicatorMessageCellV2 : SendbirdAIAgentCore.SBABaseMessageCellV2 {
  @objc @_Concurrency.MainActor @preconcurrency public var typingBubbleView: SendbirdAIAgentCore.SBATypingIndicatorBubbleView {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency override open func layoutContents(with configuration: SendbirdAIAgentCore.SBABaseMessageCellParams) -> UIKit.UIView
  @_Concurrency.MainActor @preconcurrency override public func configure(with configuration: SendbirdAIAgentCore.SBABaseMessageCellParams)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func prepareForReuse()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func setupStyles()
  @_Concurrency.MainActor @preconcurrency override public func updateGroupingViews(with configuration: SendbirdAIAgentCore.SBABaseMessageCellParams)
  @_Concurrency.MainActor @preconcurrency override open func updateUserNameView(with configuration: SendbirdAIAgentCore.SBABaseMessageCellParams)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class SBAUnknownMessageCellV2 : SendbirdAIAgentCore.SBAUserMessageCellV2 {
  @_Concurrency.MainActor @preconcurrency override public func configure(with configuration: SendbirdAIAgentCore.SBABaseMessageCellParams)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency open class SBAUserMessageCellV2 : SendbirdAIAgentCore.SBABaseMessageCellV2 {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func setupViews()
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func setupActions()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func setupStyles()
  @_Concurrency.MainActor @preconcurrency override open func configure(with configuration: SendbirdAIAgentCore.SBABaseMessageCellParams)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency open class SBAUserNameView : SendbirdAIAgentCore.SBAView {
  @_Concurrency.MainActor @preconcurrency public var nameButton: UIKit.UIButton
  @_Concurrency.MainActor @preconcurrency @objc dynamic public init()
  @_Concurrency.MainActor @preconcurrency public init(username: Swift.String)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public init(frame: CoreFoundation.CGRect)
  @available(*, unavailable, renamed: "UserNameView(username:)")
  @_Concurrency.MainActor @preconcurrency required public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency @objc dynamic open func setupViews()
  @_Concurrency.MainActor @preconcurrency @objc dynamic open func setupLayouts()
  @_Concurrency.MainActor @preconcurrency @objc dynamic open func updateLayouts()
  @_Concurrency.MainActor @preconcurrency @objc dynamic open func setupStyles()
  @_Concurrency.MainActor @preconcurrency @objc dynamic open func updateStyles()
  @_Concurrency.MainActor @preconcurrency open func configure(username: Swift.String)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency open class BaseView : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency open var bodyViewSafeAreaAnchor: SendbirdAIAgentCore.SafeAreaAnchor {
    get
  }
  @_Concurrency.MainActor @preconcurrency public func setupBodyView()
  @_Concurrency.MainActor @preconcurrency public func setupBodyLayouts()
  @_Concurrency.MainActor @preconcurrency public func setupBodyContents(_ contents: UIKit.UIView)
  @_Concurrency.MainActor @preconcurrency weak public var messengerInfo: SendbirdAIAgentCore.SBAMessengerInfo? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency open class SBAView : SendbirdAIAgentCore.BaseView {
  @available(*, unavailable, renamed: "init(frame:)")
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func layoutSubviews()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class SBAViewControllerSet {
  public static var ConversationListViewController: SendbirdAIAgentCore.SBAConversationListViewController.Type
  public static var ConversationViewController: SendbirdAIAgentCore.SBAConversationViewController.Type
  public static var LauncherConversationListViewController: SendbirdAIAgentCore.SBALauncherConversationListViewController.Type
  @objc deinit
}
@_hasMissingDesignatedInitializers public class SBAViewModelSet {
  public static var ConversationListViewModel: SendbirdAIAgentCore.SBAConversationListViewModel.Type
  @objc deinit
}
@_hasMissingDesignatedInitializers public class SBABaseMessageCellParams {
  final public let message: SendbirdChatSDK.BaseMessage
  public var messagePosition: SendbirdAIAgentCore.MessagePosition
  public var groupPosition: SendbirdAIAgentCore.MessageGroupPosition
  @objc deinit
}
extension Foundation.NSItemProvider : @unchecked @retroactive Swift.Sendable {
}
extension Foundation.NSData : @unchecked @retroactive Swift.Sendable {
}
public struct CodeBlockTheme {
  public var font: Splash.Font
  public var plainTextColor: Splash.Color
  public var titleAreaBackgroundColor: Splash.Color
  public var codeAreaBackgroundColor: Splash.Color
  public var tokenColors: [Splash.TokenType : Splash.Color]
  public init(font: Splash.Font, plainTextColor: Splash.Color, tokenColors: [Splash.TokenType : Splash.Color], titleAreaBackgroundColor: Splash.Color, codeAreaBackgroundColor: Splash.Color)
}
extension UIKit.UIImage {
  public func sba_with(tintColor: UIKit.UIColor?) -> UIKit.UIImage
  public func sba_with(tintColor: UIKit.UIColor?, enabled: Swift.Bool) -> UIKit.UIImage
  public func sba_with(tintColor: UIKit.UIColor?, forTemplate: Swift.Bool) -> UIKit.UIImage
  public func sba_convertToData() -> Foundation.Data?
  public func sba_resize(with targetSize: CoreFoundation.CGSize) -> UIKit.UIImage
  public func sba_withBackground(color: UIKit.UIColor, margin: CoreFoundation.CGFloat, circle: Swift.Bool = false) -> UIKit.UIImage
  public static func sba_from(color: UIKit.UIColor) -> UIKit.UIImage
  public func sba_with(tintColor: UIKit.UIColor?, targetSize: CoreFoundation.CGSize?) -> UIKit.UIImage
}
extension UIKit.UINavigationController {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open var preferredStatusBarStyle: UIKit.UIStatusBarStyle {
    @objc get
  }
}
extension UIKit.UIView {
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func sba_constraint(equalTo view: UIKit.UIView, leading: CoreFoundation.CGFloat? = nil, trailing: CoreFoundation.CGFloat? = nil, left: CoreFoundation.CGFloat? = nil, right: CoreFoundation.CGFloat? = nil, top: CoreFoundation.CGFloat? = nil, bottom: CoreFoundation.CGFloat? = nil, centerX: CoreFoundation.CGFloat? = nil, centerY: CoreFoundation.CGFloat? = nil, priority: UIKit.UILayoutPriority? = nil, useSafeArea: Swift.Bool = false) -> UIKit.UIView
}
extension UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency public func roundCorners(corners: UIKit.UIRectCorner, radius: CoreFoundation.CGFloat)
}
public struct SafeAreaAnchor : Swift.OptionSet {
  public let rawValue: Swift.Int
  public init(rawValue: Swift.Int)
  public static let top: SendbirdAIAgentCore.SafeAreaAnchor
  public static let bottom: SendbirdAIAgentCore.SafeAreaAnchor
  public static let leading: SendbirdAIAgentCore.SafeAreaAnchor
  public static let trailing: SendbirdAIAgentCore.SafeAreaAnchor
  public static let all: SendbirdAIAgentCore.SafeAreaAnchor
  public static let none: SendbirdAIAgentCore.SafeAreaAnchor
  public typealias ArrayLiteralElement = SendbirdAIAgentCore.SafeAreaAnchor
  public typealias Element = SendbirdAIAgentCore.SafeAreaAnchor
  public typealias RawValue = Swift.Int
}
extension SendbirdAIAgentCore.SBAColorScheme : Swift.Equatable {}
extension SendbirdAIAgentCore.SBAColorScheme : Swift.Hashable {}
extension SendbirdAIAgentCore.SBAConversationModule.Header.DataSourceEvent : Swift.Equatable {}
extension SendbirdAIAgentCore.SBAConversationModule.Header.DataSourceEvent : Swift.Hashable {}
extension SendbirdAIAgentCore.SBAConversationModule.Input.DataSourceEvent : Swift.Equatable {}
extension SendbirdAIAgentCore.SBAConversationModule.Input.DataSourceEvent : Swift.Hashable {}
extension SendbirdAIAgentCore.SBAEntryPoint : Swift.Equatable {}
extension SendbirdAIAgentCore.SBAEntryPoint : Swift.Hashable {}
extension SendbirdAIAgentCore.MediaResourceType : Swift.Equatable {}
extension SendbirdAIAgentCore.MediaResourceType : Swift.Hashable {}
extension SendbirdAIAgentCore.MediaResourceType : Swift.RawRepresentable {}
extension SendbirdAIAgentCore.MessagePosition : Swift.Equatable {}
extension SendbirdAIAgentCore.MessagePosition : Swift.Hashable {}
extension SendbirdAIAgentCore.MessagePosition : Swift.RawRepresentable {}
extension SendbirdAIAgentCore.MessageGroupPosition : Swift.Equatable {}
extension SendbirdAIAgentCore.MessageGroupPosition : Swift.Hashable {}
extension SendbirdAIAgentCore.MessageGroupPosition : Swift.RawRepresentable {}
extension SendbirdAIAgentCore.SBAMessageReceiptState : Swift.Equatable {}
extension SendbirdAIAgentCore.SBAMessageReceiptState : Swift.Hashable {}
extension SendbirdAIAgentCore.SBAMessageReceiptState : Swift.RawRepresentable {}
extension SendbirdAIAgentCore.SBAErrorType : Swift.Equatable {}
extension SendbirdAIAgentCore.SBAErrorType : Swift.Hashable {}
extension SendbirdAIAgentCore.LauncherPosition : Swift.Equatable {}
extension SendbirdAIAgentCore.LauncherPosition : Swift.Hashable {}
extension SendbirdAIAgentCore.SBALinearLayout.HorizontalAlignment : Swift.Equatable {}
extension SendbirdAIAgentCore.SBALinearLayout.HorizontalAlignment : Swift.Hashable {}
extension SendbirdAIAgentCore.SBALinearLayout.HorizontalGravity : Swift.Equatable {}
extension SendbirdAIAgentCore.SBALinearLayout.HorizontalGravity : Swift.Hashable {}
extension SendbirdAIAgentCore.SBALinearLayout.VerticalGravity : Swift.Equatable {}
extension SendbirdAIAgentCore.SBALinearLayout.VerticalGravity : Swift.Hashable {}
extension SendbirdAIAgentCore.SBALinearLayout.VerticalAlignment : Swift.Equatable {}
extension SendbirdAIAgentCore.SBALinearLayout.VerticalAlignment : Swift.Hashable {}
extension SendbirdAIAgentCore.SBALogType : Swift.Equatable {}
extension SendbirdAIAgentCore.SBALogType : Swift.Hashable {}
extension SendbirdAIAgentCore.SBALogType : Swift.RawRepresentable {}
extension SendbirdAIAgentCore.SBAMessageCSATData.DataType : Swift.Equatable {}
extension SendbirdAIAgentCore.SBAMessageCSATData.DataType : Swift.Hashable {}
extension SendbirdAIAgentCore.SBAMessageCSATData.DataType : Swift.RawRepresentable {}
extension SendbirdAIAgentCore.SBAMessageInputMode : Swift.Equatable {}
extension SendbirdAIAgentCore.SBAMessageInputMode : Swift.Hashable {}
extension SendbirdAIAgentCore.SBAMessageInputMode : Swift.RawRepresentable {}
