// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.2 effective-5.10 (swiftlang-6.0.2.1.2 clang-1600.0.26.4)
// swift-module-flags: -target arm64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name SendbirdUIMessageTemplate
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import AVFoundation
import CoreGraphics
import DeveloperToolsSupport
import Foundation
import SendbirdChatSDK
import Swift
import SwiftUI
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public struct MessageTemplate : Swift.Codable {
  public let key: Swift.String
  public let name: Swift.String
  public let uiTemplate: Swift.String
  public let dataTemplate: Swift.String
  public let colorVariables: Swift.String
  public let createdAt: Swift.Int64
  public let updatedAt: Swift.Int64
  public var isDataTemplate: Swift.Bool {
    get
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension SendbirdUIMessageTemplate.MessageTemplate {
  public static func templateList(from json: Swift.String?) -> [SendbirdUIMessageTemplate.MessageTemplate]?
  public static func template(from json: Swift.String?) -> SendbirdUIMessageTemplate.MessageTemplate?
}
public protocol MessageTemplateProvider {
  func provide(key: Swift.String) -> SendbirdUIMessageTemplate.MessageTemplate?
  func customDataVariables(key: Swift.String) -> [Swift.String : Swift.String]
}
extension SendbirdUIMessageTemplate.MessageTemplateProvider {
  public func customDataVariables(key: Swift.String) -> [Swift.String : Swift.String]
}
public protocol HitPassViewType {
}
public struct TemplateConfig {
  public static let bundleIdentifier: Swift.String
  public static let urlForTemplateDownload: Swift.String
  public static var fontFamiliy: Swift.String?
  public static var colorScheme: SendbirdUIMessageTemplate.TemplateColorScheme
  public static var defaultChildTemplateWidth: CoreFoundation.CGFloat
  public static var defaultTheme: SendbirdUIMessageTemplate.TemplateTheme {
    get
  }
}
public enum TemplateColorScheme : Swift.String {
  case light
  case dark
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum TemplateError : Swift.Error {
  case noExist(keys: [Swift.String])
  case parseFailed
  case renderingFailed
  public var code: Swift.Int {
    get
  }
  public var message: Swift.String {
    get
  }
}
public class TemplateParser {
  public init(provider: any SendbirdUIMessageTemplate.MessageTemplateProvider)
  public func parse(key: Swift.String, messageId: Swift.Int64, dataVariables: [Swift.String : Any], viewVariables: [Swift.String : [SendbirdChatSDK.TemplateMessageData.SimpleTemplateData]], theme: SendbirdUIMessageTemplate.TemplateColorScheme? = nil) throws -> SendbirdUIMessageTemplate.TemplateSyntax.TemplateView
  @objc deinit
}
extension SendbirdUIMessageTemplate.TemplateSyntax {
  open class Action : Swift.Decodable {
    final public let type: SendbirdUIMessageTemplate.TemplateSyntax.ActionType
    final public let data: Swift.String
    final public let alterData: Swift.String?
    final public let internalData: SendbirdUIMessageTemplate.TemplateSyntax.InternalData?
    public init(type: SendbirdUIMessageTemplate.TemplateSyntax.ActionType, data: Swift.String, alterData: Swift.String?, internalData: SendbirdUIMessageTemplate.TemplateSyntax.InternalData?)
    public init(action: SendbirdUIMessageTemplate.TemplateSyntax.Action)
    required public init(from decoder: any Swift.Decoder) throws
    @objc deinit
  }
  public enum ActionType : Swift.String, Swift.Decodable {
    case web
    case custom
    case uikit
    case `internal`
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public class InternalData : Swift.Decodable {
    final public let method: Swift.String?
    final public let payload: SendbirdUIMessageTemplate.TemplateSyntax.InternalData.Payload?
    public class Payload : Swift.Decodable {
      final public let message: Swift.String?
      @objc deinit
      required public init(from decoder: any Swift.Decoder) throws
    }
    @objc deinit
    required public init(from decoder: any Swift.Decoder) throws
  }
}
extension SendbirdUIMessageTemplate.TemplateSyntax {
  public class Align : Swift.Decodable {
    public var horizontal: SendbirdUIMessageTemplate.TemplateSyntax.HorizontalAlign?
    public var vertical: SendbirdUIMessageTemplate.TemplateSyntax.VerticalAlign?
    public init(horizontal: SendbirdUIMessageTemplate.TemplateSyntax.HorizontalAlign = .left, vertical: SendbirdUIMessageTemplate.TemplateSyntax.VerticalAlign = .top)
    required public init(from decoder: any Swift.Decoder) throws
    @objc deinit
  }
  @_inheritsConvenienceInitializers public class TextAlign : SendbirdUIMessageTemplate.TemplateSyntax.Align {
    public static var defaultAlign: SendbirdUIMessageTemplate.TemplateSyntax.TextAlign {
      get
    }
    override public init(horizontal: SendbirdUIMessageTemplate.TemplateSyntax.HorizontalAlign = super, vertical: SendbirdUIMessageTemplate.TemplateSyntax.VerticalAlign = super)
    required public init(from decoder: any Swift.Decoder) throws
    @objc deinit
  }
  @_inheritsConvenienceInitializers public class ItemsAlign : SendbirdUIMessageTemplate.TemplateSyntax.Align {
    public static var defaultAlign: SendbirdUIMessageTemplate.TemplateSyntax.ItemsAlign {
      get
    }
    override public init(horizontal: SendbirdUIMessageTemplate.TemplateSyntax.HorizontalAlign = super, vertical: SendbirdUIMessageTemplate.TemplateSyntax.VerticalAlign = super)
    required public init(from decoder: any Swift.Decoder) throws
    @objc deinit
  }
}
public struct TemplateSyntax {
}
extension SendbirdUIMessageTemplate.TemplateSyntax {
  public enum Item {
    case box(SendbirdUIMessageTemplate.TemplateSyntax.Box)
    case text(SendbirdUIMessageTemplate.TemplateSyntax.Text)
    case textButton(SendbirdUIMessageTemplate.TemplateSyntax.TextButton)
    case imageButton(SendbirdUIMessageTemplate.TemplateSyntax.ImageButton)
    case image(SendbirdUIMessageTemplate.TemplateSyntax.Image)
    case carouselView(SendbirdUIMessageTemplate.TemplateSyntax.CarouselView)
    case cascadeView(SendbirdUIMessageTemplate.TemplateSyntax.CascadeView)
  }
}
extension SendbirdUIMessageTemplate.TemplateSyntax.Item : Swift.Decodable {
  public init(from decoder: any Swift.Decoder) throws
  public enum ItemType : Swift.String, Swift.Decodable {
    case box
    case text
    case image
    case textButton
    case imageButton
    case carouselView
    case cascadeView
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
}
extension SendbirdUIMessageTemplate.TemplateSyntax {
  public class SizeSpec : Swift.Decodable {
    public var type: SendbirdUIMessageTemplate.TemplateSyntax.SizeType
    public var value: Swift.Int
    required public init(from decoder: any Swift.Decoder) throws
    public init(type: SendbirdUIMessageTemplate.TemplateSyntax.SizeType = .fixed, value: Swift.Int = 0)
    public static var fillParent: SendbirdUIMessageTemplate.TemplateSyntax.SizeSpec {
      get
    }
    public static var wrapContent: SendbirdUIMessageTemplate.TemplateSyntax.SizeSpec {
      get
    }
    @objc deinit
  }
  public class MetaData : Swift.Decodable {
    public var pixelWidth: Swift.Int
    public var pixelHeight: Swift.Int
    required public init(from decoder: any Swift.Decoder) throws
    @objc deinit
  }
  public class Margin : Swift.Decodable {
    final public let top: CoreFoundation.CGFloat
    final public let bottom: CoreFoundation.CGFloat
    final public let left: CoreFoundation.CGFloat
    final public let right: CoreFoundation.CGFloat
    required public init(from decoder: any Swift.Decoder) throws
    public init(top: CoreFoundation.CGFloat, bottom: CoreFoundation.CGFloat, left: CoreFoundation.CGFloat, right: CoreFoundation.CGFloat)
    @objc deinit
  }
  public class Padding : Swift.Decodable {
    public var top: CoreFoundation.CGFloat
    public var bottom: CoreFoundation.CGFloat
    public var left: CoreFoundation.CGFloat
    public var right: CoreFoundation.CGFloat
    required public init(from decoder: any Swift.Decoder) throws
    public init(top: CoreFoundation.CGFloat, bottom: CoreFoundation.CGFloat, left: CoreFoundation.CGFloat, right: CoreFoundation.CGFloat)
    @objc deinit
  }
}
extension SendbirdUIMessageTemplate.TemplateSyntax {
  public class ViewStyle : Swift.Decodable {
    final public let backgroundColor: Swift.String?
    final public let backgroundImageUrl: Swift.String?
    final public let borderWidth: Swift.Int?
    final public let borderColor: Swift.String?
    public var radius: Swift.Int?
    final public let margin: SendbirdUIMessageTemplate.TemplateSyntax.Margin?
    public var padding: SendbirdUIMessageTemplate.TemplateSyntax.Padding?
    required public init(from decoder: any Swift.Decoder) throws
    public init(backgroundColor: Swift.String? = nil, backgroundImageUrl: Swift.String? = nil, borderWidth: Swift.Int? = nil, borderColor: Swift.String? = nil, radius: Swift.Int? = nil, margin: SendbirdUIMessageTemplate.TemplateSyntax.Margin? = nil, padding: SendbirdUIMessageTemplate.TemplateSyntax.Padding? = nil)
    @objc deinit
  }
  public class TextStyle : Swift.Decodable {
    final public let size: Swift.Int?
    final public let color: Swift.String?
    final public let weight: SendbirdUIMessageTemplate.TemplateSyntax.WeightType?
    required public init(from decoder: any Swift.Decoder) throws
    public init(size: Swift.Int? = nil, color: Swift.String? = nil, weight: SendbirdUIMessageTemplate.TemplateSyntax.WeightType? = nil)
    @objc deinit
  }
  public class ImageStyle : Swift.Decodable {
    final public let contentMode: UIKit.UIView.ContentMode
    final public let tintColor: Swift.String?
    public init()
    required public init(from decoder: any Swift.Decoder) throws
    public init(contentMode: UIKit.UIView.ContentMode, tintColor: Swift.String?)
    @objc deinit
  }
}
extension SendbirdUIMessageTemplate.TemplateSyntax {
  public enum LayoutType : Swift.String, Swift.Decodable {
    case row, column
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum WeightType : Swift.String, Swift.Decodable {
    case normal, bold
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum ContentMode : Swift.String, Swift.Decodable {
    case aspectFill, aspectFit, scalesToFill
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum SizeType : Swift.String, Swift.Decodable {
    case fixed, flex, unknown
    public init(from decoder: any Swift.Decoder) throws
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum HorizontalAlign : Swift.String, Swift.Decodable {
    case left, center, right
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum VerticalAlign : Swift.String, Swift.Decodable {
    case top, center, bottom
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
}
extension SendbirdUIMessageTemplate.TemplateSyntax {
  public class TemplateView : Swift.Decodable {
    final public let version: Swift.Int?
    final public let body: SendbirdUIMessageTemplate.TemplateSyntax.Body?
    public var key: Swift.String {
      get
    }
    public var messageId: Swift.Int64 {
      get
    }
    public var templateJson: Swift.String?
    public var templateModel: SendbirdUIMessageTemplate.MessageTemplate?
    required public init(from decoder: any Swift.Decoder) throws
    public init(version: Swift.Int? = nil, body: SendbirdUIMessageTemplate.TemplateSyntax.Body, messageId: Swift.Int64?)
    @objc deinit
  }
}
extension SendbirdUIMessageTemplate.TemplateSyntax {
  public class Body : Swift.Decodable {
    public var items: [SendbirdUIMessageTemplate.TemplateSyntax.Item]?
    public init(items: [SendbirdUIMessageTemplate.TemplateSyntax.Item]? = nil)
    required public init(from decoder: any Swift.Decoder) throws
    @objc deinit
  }
  public class View : Swift.Decodable {
    final public let type: SendbirdUIMessageTemplate.TemplateSyntax.Item.ItemType
    final public let action: SendbirdUIMessageTemplate.TemplateSyntax.Action?
    final public let viewStyle: SendbirdUIMessageTemplate.TemplateSyntax.ViewStyle
    final public let width: SendbirdUIMessageTemplate.TemplateSyntax.SizeSpec
    final public let height: SendbirdUIMessageTemplate.TemplateSyntax.SizeSpec
    public var key: Swift.String {
      get
    }
    required public init(from decoder: any Swift.Decoder) throws
    public init(type: SendbirdUIMessageTemplate.TemplateSyntax.Item.ItemType, viewStyle: SendbirdUIMessageTemplate.TemplateSyntax.ViewStyle? = nil, width: SendbirdUIMessageTemplate.TemplateSyntax.SizeSpec = .fillParent, height: SendbirdUIMessageTemplate.TemplateSyntax.SizeSpec = .wrapContent, action: SendbirdUIMessageTemplate.TemplateSyntax.Action? = nil)
    @objc deinit
  }
}
extension SendbirdUIMessageTemplate.TemplateSyntax {
  public class Box : SendbirdUIMessageTemplate.TemplateSyntax.View {
    final public let layout: SendbirdUIMessageTemplate.TemplateSyntax.LayoutType
    final public let items: [SendbirdUIMessageTemplate.TemplateSyntax.Item]?
    final public let align: SendbirdUIMessageTemplate.TemplateSyntax.ItemsAlign
    required public init(from decoder: any Swift.Decoder) throws
    public init(layout: SendbirdUIMessageTemplate.TemplateSyntax.LayoutType, align: SendbirdUIMessageTemplate.TemplateSyntax.ItemsAlign, type: SendbirdUIMessageTemplate.TemplateSyntax.Item.ItemType, viewStyle: SendbirdUIMessageTemplate.TemplateSyntax.ViewStyle? = nil, width: SendbirdUIMessageTemplate.TemplateSyntax.SizeSpec = .fillParent, height: SendbirdUIMessageTemplate.TemplateSyntax.SizeSpec = .wrapContent, items: [SendbirdUIMessageTemplate.TemplateSyntax.Item]?, action: SendbirdUIMessageTemplate.TemplateSyntax.Action? = nil)
    @objc deinit
  }
  public class Text : SendbirdUIMessageTemplate.TemplateSyntax.View {
    final public let text: Swift.String
    final public let maxTextLines: Swift.Int
    final public let textStyle: SendbirdUIMessageTemplate.TemplateSyntax.TextStyle?
    final public let align: SendbirdUIMessageTemplate.TemplateSyntax.TextAlign
    required public init(from decoder: any Swift.Decoder) throws
    public init(text: Swift.String, maxTextLines: Swift.Int, textStyle: SendbirdUIMessageTemplate.TemplateSyntax.TextStyle?, type: SendbirdUIMessageTemplate.TemplateSyntax.Item.ItemType, viewStyle: SendbirdUIMessageTemplate.TemplateSyntax.ViewStyle? = nil, width: SendbirdUIMessageTemplate.TemplateSyntax.SizeSpec = .fillParent, height: SendbirdUIMessageTemplate.TemplateSyntax.SizeSpec = .wrapContent, action: SendbirdUIMessageTemplate.TemplateSyntax.Action? = nil, align: SendbirdUIMessageTemplate.TemplateSyntax.TextAlign = .defaultAlign)
    @objc deinit
  }
  public class Image : SendbirdUIMessageTemplate.TemplateSyntax.View {
    final public let imageUrl: Swift.String
    final public let imageStyle: SendbirdUIMessageTemplate.TemplateSyntax.ImageStyle
    final public let metaData: SendbirdUIMessageTemplate.TemplateSyntax.MetaData?
    required public init(from decoder: any Swift.Decoder) throws
    public init(imageUrl: Swift.String, imageStyle: SendbirdUIMessageTemplate.TemplateSyntax.ImageStyle, metaData: SendbirdUIMessageTemplate.TemplateSyntax.MetaData?, viewStyle: SendbirdUIMessageTemplate.TemplateSyntax.ViewStyle? = nil, width: SendbirdUIMessageTemplate.TemplateSyntax.SizeSpec = .fillParent, height: SendbirdUIMessageTemplate.TemplateSyntax.SizeSpec = .wrapContent, action: SendbirdUIMessageTemplate.TemplateSyntax.Action? = nil)
    @objc deinit
  }
  public class TextButton : SendbirdUIMessageTemplate.TemplateSyntax.View {
    final public let text: Swift.String?
    final public let maxTextLines: Swift.Int
    final public let textStyle: SendbirdUIMessageTemplate.TemplateSyntax.TextStyle?
    public init(text: Swift.String?, maxTextLines: Swift.Int, textStyle: SendbirdUIMessageTemplate.TemplateSyntax.TextStyle?, type: SendbirdUIMessageTemplate.TemplateSyntax.Item.ItemType, viewStyle: SendbirdUIMessageTemplate.TemplateSyntax.ViewStyle? = nil, width: SendbirdUIMessageTemplate.TemplateSyntax.SizeSpec = .fillParent, height: SendbirdUIMessageTemplate.TemplateSyntax.SizeSpec = .wrapContent, action: SendbirdUIMessageTemplate.TemplateSyntax.Action? = nil)
    required public init(from decoder: any Swift.Decoder) throws
    @objc deinit
  }
  public class ImageButton : SendbirdUIMessageTemplate.TemplateSyntax.View {
    final public let imageUrl: Swift.String
    final public let imageStyle: SendbirdUIMessageTemplate.TemplateSyntax.ImageStyle
    final public let metaData: SendbirdUIMessageTemplate.TemplateSyntax.MetaData?
    public init(imageUrl: Swift.String, imageStyle: SendbirdUIMessageTemplate.TemplateSyntax.ImageStyle, metaData: SendbirdUIMessageTemplate.TemplateSyntax.MetaData?, type: SendbirdUIMessageTemplate.TemplateSyntax.Item.ItemType, viewStyle: SendbirdUIMessageTemplate.TemplateSyntax.ViewStyle? = nil, width: SendbirdUIMessageTemplate.TemplateSyntax.SizeSpec = .fillParent, height: SendbirdUIMessageTemplate.TemplateSyntax.SizeSpec = .wrapContent, action: SendbirdUIMessageTemplate.TemplateSyntax.Action? = nil)
    required public init(from decoder: any Swift.Decoder) throws
    @objc deinit
  }
  public class CarouselView : SendbirdUIMessageTemplate.TemplateSyntax.View {
    final public let items: [SendbirdUIMessageTemplate.TemplateSyntax.TemplateView]?
    final public let carouselStyle: SendbirdUIMessageTemplate.TemplateSyntax.CarouselStyle
    public init(items: [SendbirdUIMessageTemplate.TemplateSyntax.TemplateView]?, carouselStyle: SendbirdUIMessageTemplate.TemplateSyntax.CarouselStyle, type: SendbirdUIMessageTemplate.TemplateSyntax.Item.ItemType, viewStyle: SendbirdUIMessageTemplate.TemplateSyntax.ViewStyle? = nil, width: SendbirdUIMessageTemplate.TemplateSyntax.SizeSpec = .fillParent, height: SendbirdUIMessageTemplate.TemplateSyntax.SizeSpec = .wrapContent, action: SendbirdUIMessageTemplate.TemplateSyntax.Action? = nil)
    required public init(from decoder: any Swift.Decoder) throws
    @objc deinit
  }
  public class CarouselStyle : Swift.Decodable {
    final public let spacing: CoreFoundation.CGFloat
    final public let maxChildWidth: CoreFoundation.CGFloat
    public init(spacing: CoreFoundation.CGFloat = 10, maxChildWidth: CoreFoundation.CGFloat = TemplateConfig.defaultChildTemplateWidth)
    required public init(from decoder: any Swift.Decoder) throws
    @objc deinit
  }
  public class CascadeView : SendbirdUIMessageTemplate.TemplateSyntax.View {
    final public let items: [SendbirdUIMessageTemplate.TemplateSyntax.TemplateView]?
    final public let cascadeStyle: SendbirdUIMessageTemplate.TemplateSyntax.CascadeStyle
    public init(items: [SendbirdUIMessageTemplate.TemplateSyntax.TemplateView]?, cascadeStyle: SendbirdUIMessageTemplate.TemplateSyntax.CascadeStyle, type: SendbirdUIMessageTemplate.TemplateSyntax.Item.ItemType, viewStyle: SendbirdUIMessageTemplate.TemplateSyntax.ViewStyle? = nil, width: SendbirdUIMessageTemplate.TemplateSyntax.SizeSpec = .fillParent, height: SendbirdUIMessageTemplate.TemplateSyntax.SizeSpec = .wrapContent, action: SendbirdUIMessageTemplate.TemplateSyntax.Action? = nil)
    required public init(from decoder: any Swift.Decoder) throws
    @objc deinit
  }
  public class CascadeStyle : Swift.Decodable {
    final public let spacing: CoreFoundation.CGFloat
    public init(spacing: CoreFoundation.CGFloat = 10)
    required public init(from decoder: any Swift.Decoder) throws
    @objc deinit
  }
}
public class TemplateTheme {
  public static var light: SendbirdUIMessageTemplate.TemplateTheme
  public static var dark: SendbirdUIMessageTemplate.TemplateTheme
  public static var defaultLight: SendbirdUIMessageTemplate.TemplateTheme {
    get
  }
  public static var defaultDark: SendbirdUIMessageTemplate.TemplateTheme {
    get
  }
  public func setTheme(light: SendbirdUIMessageTemplate.TemplateTheme?, dark: SendbirdUIMessageTemplate.TemplateTheme?)
  public init(textFont: UIKit.UIFont? = nil, textColor: UIKit.UIColor? = nil, textButtonFont: UIKit.UIFont? = nil, textButtonTitleColor: UIKit.UIColor? = nil, textButtonBackgroundColor: UIKit.UIColor? = nil, viewBackgroundColor: UIKit.UIColor? = nil)
  public var textFont: UIKit.UIFont
  public var textColor: UIKit.UIColor
  public var textButtonFont: UIKit.UIFont
  public var textButtonTitleColor: UIKit.UIColor
  public var textButtonBackgroundColor: UIKit.UIColor
  public var viewBackgroundColor: UIKit.UIColor
  @objc deinit
}
public struct ViewGeneratorParams {
  public let maxWidth: CoreFoundation.CGFloat?
  public let fontFamiliy: Swift.String?
  public let delegate: (any SendbirdUIMessageTemplate.TemplateViewGeneratorDelegate)?
  public let dataSource: (any SendbirdUIMessageTemplate.TemplateViewGeneratorDataSource)?
  public init(maxWidth: CoreFoundation.CGFloat? = nil, fontFamiliy: Swift.String? = nil, delegate: (any SendbirdUIMessageTemplate.TemplateViewGeneratorDelegate)? = nil, dataSource: (any SendbirdUIMessageTemplate.TemplateViewGeneratorDataSource)? = nil)
}
@_hasMissingDesignatedInitializers public class ViewGenerator {
  public static func draw(templateView: SendbirdUIMessageTemplate.TemplateSyntax.TemplateView, params: SendbirdUIMessageTemplate.ViewGeneratorParams? = nil) throws -> UIKit.UIView
  @objc deinit
}
public protocol TemplateViewGeneratorDelegate : AnyObject {
  func templateView(_ templateView: SendbirdUIMessageTemplate.TemplateSyntax.TemplateView, didLoad image: UIKit.UIImage, from imageURL: Swift.String, named fileName: Swift.String, in subPath: Swift.String)
  func templateView(_ templateView: SendbirdUIMessageTemplate.TemplateSyntax.TemplateView, didFinishRootView view: UIKit.UIView, with identifier: Swift.String)
  func templateView(_ templateView: SendbirdUIMessageTemplate.TemplateSyntax.TemplateView, didDrawPartialItem item: SendbirdUIMessageTemplate.TemplateSyntax.Item, in view: UIKit.UIView, with identifier: Swift.String)
  func templateView(_ templateView: SendbirdUIMessageTemplate.TemplateSyntax.TemplateView, didSelect action: SendbirdUIMessageTemplate.TemplateSyntax.Action)
  func templateView(_ templateView: SendbirdUIMessageTemplate.TemplateSyntax.TemplateView, didUpdateContentX value: CoreFoundation.CGFloat, forItem item: SendbirdUIMessageTemplate.TemplateSyntax.Item, in view: UIKit.UIView, with identifier: Swift.String)
}
extension SendbirdUIMessageTemplate.TemplateViewGeneratorDelegate {
  public func templateView(_ templateView: SendbirdUIMessageTemplate.TemplateSyntax.TemplateView, didUpdateContentX value: CoreFoundation.CGFloat, forItem item: SendbirdUIMessageTemplate.TemplateSyntax.Item, in view: UIKit.UIView, with identifier: Swift.String)
}
public protocol TemplateViewGeneratorDataSource : AnyObject {
  func templateView(_ templateView: SendbirdUIMessageTemplate.TemplateSyntax.TemplateView, imageFor urlString: Swift.String, named fileName: Swift.String, in subPath: Swift.String) -> UIKit.UIImage?
  func templateView(_ templateView: SendbirdUIMessageTemplate.TemplateSyntax.TemplateView, rootViewFor identifier: Swift.String) -> UIKit.UIView?
  func templateView(_ templateView: SendbirdUIMessageTemplate.TemplateSyntax.TemplateView, viewForPartialItem item: SendbirdUIMessageTemplate.TemplateSyntax.Item, with identifier: Swift.String) -> UIKit.UIView?
}
extension SendbirdUIMessageTemplate.TemplateColorScheme : Swift.Equatable {}
extension SendbirdUIMessageTemplate.TemplateColorScheme : Swift.Hashable {}
extension SendbirdUIMessageTemplate.TemplateColorScheme : Swift.RawRepresentable {}
extension SendbirdUIMessageTemplate.TemplateSyntax.ActionType : Swift.Equatable {}
extension SendbirdUIMessageTemplate.TemplateSyntax.ActionType : Swift.Hashable {}
extension SendbirdUIMessageTemplate.TemplateSyntax.ActionType : Swift.RawRepresentable {}
extension SendbirdUIMessageTemplate.TemplateSyntax.Item.ItemType : Swift.Equatable {}
extension SendbirdUIMessageTemplate.TemplateSyntax.Item.ItemType : Swift.Hashable {}
extension SendbirdUIMessageTemplate.TemplateSyntax.Item.ItemType : Swift.RawRepresentable {}
extension SendbirdUIMessageTemplate.TemplateSyntax.LayoutType : Swift.Equatable {}
extension SendbirdUIMessageTemplate.TemplateSyntax.LayoutType : Swift.Hashable {}
extension SendbirdUIMessageTemplate.TemplateSyntax.LayoutType : Swift.RawRepresentable {}
extension SendbirdUIMessageTemplate.TemplateSyntax.WeightType : Swift.Equatable {}
extension SendbirdUIMessageTemplate.TemplateSyntax.WeightType : Swift.Hashable {}
extension SendbirdUIMessageTemplate.TemplateSyntax.WeightType : Swift.RawRepresentable {}
extension SendbirdUIMessageTemplate.TemplateSyntax.ContentMode : Swift.Equatable {}
extension SendbirdUIMessageTemplate.TemplateSyntax.ContentMode : Swift.Hashable {}
extension SendbirdUIMessageTemplate.TemplateSyntax.ContentMode : Swift.RawRepresentable {}
extension SendbirdUIMessageTemplate.TemplateSyntax.SizeType : Swift.Equatable {}
extension SendbirdUIMessageTemplate.TemplateSyntax.SizeType : Swift.Hashable {}
extension SendbirdUIMessageTemplate.TemplateSyntax.SizeType : Swift.RawRepresentable {}
extension SendbirdUIMessageTemplate.TemplateSyntax.HorizontalAlign : Swift.Equatable {}
extension SendbirdUIMessageTemplate.TemplateSyntax.HorizontalAlign : Swift.Hashable {}
extension SendbirdUIMessageTemplate.TemplateSyntax.HorizontalAlign : Swift.RawRepresentable {}
extension SendbirdUIMessageTemplate.TemplateSyntax.VerticalAlign : Swift.Equatable {}
extension SendbirdUIMessageTemplate.TemplateSyntax.VerticalAlign : Swift.Hashable {}
extension SendbirdUIMessageTemplate.TemplateSyntax.VerticalAlign : Swift.RawRepresentable {}
